// ---------------------------------------------------------------------------
//	FM Sound Generator - Core Unit
//	Copyright (C) cisc 1998, 2003.
// ---------------------------------------------------------------------------
//	$Id: fmgen.cpp,v 1.49 2003/09/02 14:51:04 cisc Exp $
// ---------------------------------------------------------------------------
//	参考:
//		FM sound generator for M.A.M.E., written by Tatsuyuki Satoh.
//
// 	謎:
//		OPNB の CSM モード(仕様がよくわからない)
//
//	制限:
//		・AR!=31 で SSGEC を使うと波形が実際と異なる可能性あり
//
//	謝辞:
//		Tatsuyuki Satoh さん(fm.c)
//		Hiromitsu Shioya さん(ADPCM-A)
//		DMP-SOFT. さん(OPNB)
//		KAJA さん(test program)
//		ほか掲示板等で様々なご助言，ご支援をお寄せいただいた皆様に
// ---------------------------------------------------------------------------

#include "stdafx.h"
#include "os.h"
#include "cisc.h"
#include "fmgen.h"
#include "fmgeninl.h"

#define LOGNAME "fmgen"

// ---------------------------------------------------------------------------

#define FM_EG_BOTTOM 955

// ---------------------------------------------------------------------------
//	Table/etc
//
namespace FM
{
	const uint8 Operator::notetable[128] =
	{
		 0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  3,  3,  3,  3,  3,  3, 
		 4,  4,  4,  4,  4,  4,  4,  5,  6,  7,  7,  7,  7,  7,  7,  7, 
		 8,  8,  8,  8,  8,  8,  8,  9, 10, 11, 11, 11, 11, 11, 11, 11, 
		12, 12, 12, 12, 12, 12, 12, 13, 14, 15, 15, 15, 15, 15, 15, 15, 
		16, 16, 16, 16, 16, 16, 16, 17, 18, 19, 19, 19, 19, 19, 19, 19, 
		20, 20, 20, 20, 20, 20, 20, 21, 22, 23, 23, 23, 23, 23, 23, 23, 
		24, 24, 24, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 27, 
		28, 28, 28, 28, 28, 28, 28, 29, 30, 31, 31, 31, 31, 31, 31, 31, 
	};
	
	const int8 Operator::dttable[256] =
	{
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  4,  4,  4,  4,
		  4,  6,  6,  6,  8,  8,  8, 10, 10, 12, 12, 14, 16, 16, 16, 16,
		  2,  2,  2,  2,  4,  4,  4,  4,  4,  6,  6,  6,  8,  8,  8, 10,
		 10, 12, 12, 14, 16, 16, 18, 20, 22, 24, 26, 28, 32, 32, 32, 32,
		  4,  4,  4,  4,  4,  6,  6,  6,  8,  8,  8, 10, 10, 12, 12, 14,
		 16, 16, 18, 20, 22, 24, 26, 28, 32, 34, 38, 40, 44, 44, 44, 44,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0, -2, -2, -2, -2, -2, -2, -2, -2, -4, -4, -4, -4,
		 -4, -6, -6, -6, -8, -8, -8,-10,-10,-12,-12,-14,-16,-16,-16,-16,
		 -2, -2, -2, -2, -4, -4, -4, -4, -4, -6, -6, -6, -8, -8, -8,-10,
		-10,-12,-12,-14,-16,-16,-18,-20,-22,-24,-26,-28,-32,-32,-32,-32,
		 -4, -4, -4, -4, -4, -6, -6, -6, -8, -8, -8,-10,-10,-12,-12,-14,
		-16,-16,-18,-20,-22,-24,-26,-28,-32,-34,-38,-40,-44,-44,-44,-44,
	};

	const int8 Operator::decaytable1[64][8] =
	{
		{0, 0, 0, 0, 0, 0, 0, 0},		{0, 0, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1},		{1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1},		{1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 0, 1, 1, 1, 0},		{1, 1, 1, 0, 1, 1, 1, 0},
		{1, 0, 1, 0, 1, 0, 1, 0},		{1, 1, 1, 0, 1, 0, 1, 0},
		{1, 1, 1, 0, 1, 1, 1, 0},		{1, 1, 1, 1, 1, 1, 1, 0},
		{1, 0, 1, 0, 1, 0, 1, 0},		{1, 1, 1, 0, 1, 0, 1, 0},
		{1, 1, 1, 0, 1, 1, 1, 0},		{1, 1, 1, 1, 1, 1, 1, 0},
		{1, 0, 1, 0, 1, 0, 1, 0},		{1, 1, 1, 0, 1, 0, 1, 0},
		{1, 1, 1, 0, 1, 1, 1, 0},		{1, 1, 1, 1, 1, 1, 1, 0},
		{1, 0, 1, 0, 1, 0, 1, 0},		{1, 1, 1, 0, 1, 0, 1, 0},
		{1, 1, 1, 0, 1, 1, 1, 0},		{1, 1, 1, 1, 1, 1, 1, 0},
		{1, 0, 1, 0, 1, 0, 1, 0},		{1, 1, 1, 0, 1, 0, 1, 0},
		{1, 1, 1, 0, 1, 1, 1, 0},		{1, 1, 1, 1, 1, 1, 1, 0},
		{1, 0, 1, 0, 1, 0, 1, 0},		{1, 1, 1, 0, 1, 0, 1, 0},
		{1, 1, 1, 0, 1, 1, 1, 0},		{1, 1, 1, 1, 1, 1, 1, 0},
		{1, 0, 1, 0, 1, 0, 1, 0},		{1, 1, 1, 0, 1, 0, 1, 0},
		{1, 1, 1, 0, 1, 1, 1, 0},		{1, 1, 1, 1, 1, 1, 1, 0},
		{1, 0, 1, 0, 1, 0, 1, 0},		{1, 1, 1, 0, 1, 0, 1, 0},
		{1, 1, 1, 0, 1, 1, 1, 0},		{1, 1, 1, 1, 1, 1, 1, 0},
		{1, 0, 1, 0, 1, 0, 1, 0},		{1, 1, 1, 0, 1, 0, 1, 0},
		{1, 1, 1, 0, 1, 1, 1, 0},		{1, 1, 1, 1, 1, 1, 1, 0},
		{1, 0, 1, 0, 1, 0, 1, 0},		{1, 1, 1, 0, 1, 0, 1, 0},
		{1, 1, 1, 0, 1, 1, 1, 0},		{1, 1, 1, 1, 1, 1, 1, 0},
		{1, 1, 1, 1, 1, 1, 1, 1},		{2, 1, 1, 1, 2, 1, 1, 1},
		{2, 1, 2, 1, 2, 1, 2, 1},		{2, 2, 2, 1, 2, 2, 2, 1},
		{2, 2, 2, 2, 2, 2, 2, 2},		{4, 2, 2, 2, 4, 2, 2, 2},
		{4, 2, 4, 2, 4, 2, 4, 2},		{4, 4, 4, 2, 4, 4, 4, 2},
		{4, 4, 4, 4, 4, 4, 4, 4},		{8, 4, 4, 4, 8, 4, 4, 4},
		{8, 4, 8, 4, 8, 4, 8, 4},		{8, 8, 8, 4, 8, 8, 8, 4},
		{16,16,16,16,16,16,16,16},	{16,16,16,16,16,16,16,16},
		{16,16,16,16,16,16,16,16},	{16,16,16,16,16,16,16,16},
	};

	const int Operator::decaytable2[16] =
	{
		1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2047, 2047, 2047, 2047, 2047
	};

	const int8 Operator::attacktable[64][8] =
	{
		{-1,-1,-1,-1,-1,-1,-1,-1},	{-1,-1,-1,-1,-1,-1,-1,-1},
		 {4, 4, 4, 4, 4, 4, 4, 4},	 {4, 4, 4, 4, 4, 4, 4, 4},
		 {4, 4, 4, 4, 4, 4, 4, 4},	 {4, 4, 4, 4, 4, 4, 4, 4},
		 {4, 4, 4,-1, 4, 4, 4,-1},	 {4, 4, 4,-1, 4, 4, 4,-1},
		 {4,-1, 4,-1, 4,-1, 4,-1},	 {4, 4, 4,-1, 4,-1, 4,-1},
		 {4, 4, 4,-1, 4, 4, 4,-1},	 {4, 4, 4, 4, 4, 4, 4,-1},
		 {4,-1, 4,-1, 4,-1, 4,-1},	 {4, 4, 4,-1, 4,-1, 4,-1},
		 {4, 4, 4,-1, 4, 4, 4,-1},	 {4, 4, 4, 4, 4, 4, 4,-1},
		 {4,-1, 4,-1, 4,-1, 4,-1},	 {4, 4, 4,-1, 4,-1, 4,-1},
		 {4, 4, 4,-1, 4, 4, 4,-1},	 {4, 4, 4, 4, 4, 4, 4,-1},
		 {4,-1, 4,-1, 4,-1, 4,-1},	 {4, 4, 4,-1, 4,-1, 4,-1},
		 {4, 4, 4,-1, 4, 4, 4,-1},	 {4, 4, 4, 4, 4, 4, 4,-1},
		 {4,-1, 4,-1, 4,-1, 4,-1},	 {4, 4, 4,-1, 4,-1, 4,-1},
		 {4, 4, 4,-1, 4, 4, 4,-1},	 {4, 4, 4, 4, 4, 4, 4,-1},
		 {4,-1, 4,-1, 4,-1, 4,-1},	 {4, 4, 4,-1, 4,-1, 4,-1},
		 {4, 4, 4,-1, 4, 4, 4,-1},	 {4, 4, 4, 4, 4, 4, 4,-1},
		 {4,-1, 4,-1, 4,-1, 4,-1},	 {4, 4, 4,-1, 4,-1, 4,-1},
		 {4, 4, 4,-1, 4, 4, 4,-1},	 {4, 4, 4, 4, 4, 4, 4,-1},
		 {4,-1, 4,-1, 4,-1, 4,-1},	 {4, 4, 4,-1, 4,-1, 4,-1},
		 {4, 4, 4,-1, 4, 4, 4,-1},	 {4, 4, 4, 4, 4, 4, 4,-1},
		 {4,-1, 4,-1, 4,-1, 4,-1},	 {4, 4, 4,-1, 4,-1, 4,-1},
		 {4, 4, 4,-1, 4, 4, 4,-1},	 {4, 4, 4, 4, 4, 4, 4,-1},
		 {4,-1, 4,-1, 4,-1, 4,-1},	 {4, 4, 4,-1, 4,-1, 4,-1},
		 {4, 4, 4,-1, 4, 4, 4,-1},	 {4, 4, 4, 4, 4, 4, 4,-1},
		 {4, 4, 4, 4, 4, 4, 4, 4},	 {3, 4, 4, 4, 3, 4, 4, 4},
		 {3, 4, 3, 4, 3, 4, 3, 4},	 {3, 3, 3, 4, 3, 3, 3, 4},
		 {3, 3, 3, 3, 3, 3, 3, 3},	 {2, 3, 3, 3, 2, 3, 3, 3},
		 {2, 3, 2, 3, 2, 3, 2, 3},	 {2, 2, 2, 3, 2, 2, 2, 3},
		 {2, 2, 2, 2, 2, 2, 2, 2},	 {1, 2, 2, 2, 1, 2, 2, 2},
		 {1, 2, 1, 2, 1, 2, 1, 2},	 {1, 1, 1, 2, 1, 1, 1, 2},
		 {0, 0, 0, 0, 0, 0, 0, 0},	 {0, 0 ,0, 0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0, 0, 0, 0},	 {0, 0 ,0, 0, 0, 0, 0, 0},
	};

	const int Operator::ssgenvtable[8][2][3][2] =
	{
		{{{1, 1},  {1, 1},  {1, 1}},		// 08
		{{0, 1},  {1, 1},  {1, 1}}},		// 08 56~
		{{{0, 1},  {2, 0},  {2, 0}},		// 09
		{{0, 1},  {2, 0},  {2, 0}}},		// 09
		{{{1,-1},  {0, 1},  {1,-1}},		// 10
		{{0, 1},  {1,-1},  {0, 1}}},		// 10 60~
		{{{1,-1},  {0, 0},  {0, 0}},		// 11
		{{0, 1},  {0, 0},  {0, 0}}},		// 11 60~
		{{{2,-1},  {2,-1},  {2,-1}},		// 12
		{{1,-1},  {2,-1},  {2,-1}}},		// 12 56~
		{{{1,-1},  {0, 0},  {0, 0}},		// 13
		{{1,-1},  {0, 0},  {0, 0}}},		// 13
		{{{0, 1},  {1,-1},  {0, 1}},		// 14
		{{1,-1},  {0, 1},  {1,-1}}},		// 14 60~
		{{{0, 1},  {2, 0},  {2, 0}},		// 15
		{{1,-1},  {2, 0},  {2, 0}}},		// 15 60~
	};

	// fixed equasion-based tables
	int		pmtable[2][8][FM_LFOENTS];		// sizeof(int) * 2 * 8* 256	  = 16K Bytes
	uint	amtable[2][4][FM_LFOENTS];		// sizeof(uint) * 2 * 4 * 256 = 8 K Bytes

	static bool tablemade = false;
}

namespace FM
{
static const int kftable_s[64] = {
	65536,65595,65654,65713,65773,65832,65891,65951,
	66010,66070,66130,66189,66249,66309,66369,66429,
	66489,66549,66609,66669,66729,66789,66850,66910,
	66971,67031,67092,67152,67213,67273,67334,67395,
	67456,67517,67578,67639,67700,67761,67822,67883,
	67945,68006,68067,68129,68190,68252,68314,68375,
	68437,68499,68561,68623,68685,68747,68809,68871,
	68933,68995,69057,69120,69182,69245,69307,69370,
};

static const int cltable_s[FM_CLENTS] = {
		8192,-8192,8168,-8168,8148,-8148,8124,-8124,
		8104,-8104,8080,-8080,8060,-8060,8040,-8040,
		8016,-8016,7996,-7996,7972,-7972,7952,-7952,
		7932,-7932,7908,-7908,7888,-7888,7864,-7864,
		7844,-7844,7824,-7824,7804,-7804,7780,-7780,
		7760,-7760,7740,-7740,7720,-7720,7696,-7696,
		7676,-7676,7656,-7656,7636,-7636,7616,-7616,
		7592,-7592,7572,-7572,7552,-7552,7532,-7532,
		7512,-7512,7492,-7492,7472,-7472,7452,-7452,
		7432,-7432,7412,-7412,7392,-7392,7372,-7372,
		7352,-7352,7332,-7332,7312,-7312,7292,-7292,
		7272,-7272,7252,-7252,7232,-7232,7212,-7212,
		7192,-7192,7176,-7176,7156,-7156,7136,-7136,
		7116,-7116,7096,-7096,7076,-7076,7060,-7060,
		7040,-7040,7020,-7020,7000,-7000,6984,-6984,
		6964,-6964,6944,-6944,6928,-6928,6908,-6908,
		6888,-6888,6868,-6868,6852,-6852,6832,-6832,
		6816,-6816,6796,-6796,6776,-6776,6760,-6760,
		6740,-6740,6724,-6724,6704,-6704,6688,-6688,
		6668,-6668,6652,-6652,6632,-6632,6616,-6616,
		6596,-6596,6580,-6580,6560,-6560,6544,-6544,
		6524,-6524,6508,-6508,6492,-6492,6472,-6472,
		6456,-6456,6436,-6436,6420,-6420,6404,-6404,
		6384,-6384,6368,-6368,6352,-6352,6336,-6336,
		6316,-6316,6300,-6300,6284,-6284,6264,-6264,
		6248,-6248,6232,-6232,6216,-6216,6200,-6200,
		6180,-6180,6164,-6164,6148,-6148,6132,-6132,
		6116,-6116,6100,-6100,6080,-6080,6064,-6064,
		6048,-6048,6032,-6032,6016,-6016,6000,-6000,
		5984,-5984,5968,-5968,5952,-5952,5936,-5936,
		5920,-5920,5904,-5904,5888,-5888,5872,-5872,
		5856,-5856,5840,-5840,5824,-5824,5808,-5808,
		5792,-5792,5776,-5776,5760,-5760,5744,-5744,
		5732,-5732,5716,-5716,5700,-5700,5684,-5684,
		5668,-5668,5652,-5652,5636,-5636,5624,-5624,
		5608,-5608,5592,-5592,5576,-5576,5564,-5564,
		5548,-5548,5532,-5532,5516,-5516,5504,-5504,
		5488,-5488,5472,-5472,5456,-5456,5444,-5444,
		5428,-5428,5412,-5412,5400,-5400,5384,-5384,
		5368,-5368,5356,-5356,5340,-5340,5328,-5328,
		5312,-5312,5296,-5296,5284,-5284,5268,-5268,
		5256,-5256,5240,-5240,5228,-5228,5212,-5212,
		5200,-5200,5184,-5184,5168,-5168,5156,-5156,
		5144,-5144,5128,-5128,5116,-5116,5100,-5100,
		5088,-5088,5072,-5072,5060,-5060,5044,-5044,
		5032,-5032,5020,-5020,5004,-5004,4992,-4992,
		4976,-4976,4964,-4964,4952,-4952,4936,-4936,
		4924,-4924,4912,-4912,4896,-4896,4884,-4884,
		4872,-4872,4856,-4856,4844,-4844,4832,-4832,
		4820,-4820,4804,-4804,4792,-4792,4780,-4780,
		4768,-4768,4752,-4752,4740,-4740,4728,-4728,
		4716,-4716,4704,-4704,4688,-4688,4676,-4676,
		4664,-4664,4652,-4652,4640,-4640,4628,-4628,
		4616,-4616,4600,-4600,4588,-4588,4576,-4576,
		4564,-4564,4552,-4552,4540,-4540,4528,-4528,
		4516,-4516,4504,-4504,4492,-4492,4480,-4480,
		4468,-4468,4456,-4456,4444,-4444,4432,-4432,
		4420,-4420,4408,-4408,4396,-4396,4384,-4384,
		4372,-4372,4360,-4360,4348,-4348,4336,-4336,
		4324,-4324,4312,-4312,4300,-4300,4288,-4288,
		4276,-4276,4264,-4264,4256,-4256,4244,-4244,
		4232,-4232,4220,-4220,4208,-4208,4196,-4196,
		4184,-4184,4176,-4176,4164,-4164,4152,-4152,
		4140,-4140,4128,-4128,4120,-4120,4108,-4108,
		4096,-4096,4084,-4084,4074,-4074,4062,-4062,
		4052,-4052,4040,-4040,4030,-4030,4020,-4020,
		4008,-4008,3998,-3998,3986,-3986,3976,-3976,
		3966,-3966,3954,-3954,3944,-3944,3932,-3932,
		3922,-3922,3912,-3912,3902,-3902,3890,-3890,
		3880,-3880,3870,-3870,3860,-3860,3848,-3848,
		3838,-3838,3828,-3828,3818,-3818,3808,-3808,
		3796,-3796,3786,-3786,3776,-3776,3766,-3766,
		3756,-3756,3746,-3746,3736,-3736,3726,-3726,
		3716,-3716,3706,-3706,3696,-3696,3686,-3686,
		3676,-3676,3666,-3666,3656,-3656,3646,-3646,
		3636,-3636,3626,-3626,3616,-3616,3606,-3606,
		3596,-3596,3588,-3588,3578,-3578,3568,-3568,
		3558,-3558,3548,-3548,3538,-3538,3530,-3530,
		3520,-3520,3510,-3510,3500,-3500,3492,-3492,
		3482,-3482,3472,-3472,3464,-3464,3454,-3454,
		3444,-3444,3434,-3434,3426,-3426,3416,-3416,
		3408,-3408,3398,-3398,3388,-3388,3380,-3380,
		3370,-3370,3362,-3362,3352,-3352,3344,-3344,
		3334,-3334,3326,-3326,3316,-3316,3308,-3308,
		3298,-3298,3290,-3290,3280,-3280,3272,-3272,
		3262,-3262,3254,-3254,3246,-3246,3236,-3236,
		3228,-3228,3218,-3218,3210,-3210,3202,-3202,
		3192,-3192,3184,-3184,3176,-3176,3168,-3168,
		3158,-3158,3150,-3150,3142,-3142,3132,-3132,
		3124,-3124,3116,-3116,3108,-3108,3100,-3100,
		3090,-3090,3082,-3082,3074,-3074,3066,-3066,
		3058,-3058,3050,-3050,3040,-3040,3032,-3032,
		3024,-3024,3016,-3016,3008,-3008,3000,-3000,
		2992,-2992,2984,-2984,2976,-2976,2968,-2968,
		2960,-2960,2952,-2952,2944,-2944,2936,-2936,
		2928,-2928,2920,-2920,2912,-2912,2904,-2904,
		2896,-2896,2888,-2888,2880,-2880,2872,-2872,
		2866,-2866,2858,-2858,2850,-2850,2842,-2842,
		2834,-2834,2826,-2826,2818,-2818,2812,-2812,
		2804,-2804,2796,-2796,2788,-2788,2782,-2782,
		2774,-2774,2766,-2766,2758,-2758,2752,-2752,
		2744,-2744,2736,-2736,2728,-2728,2722,-2722,
		2714,-2714,2706,-2706,2700,-2700,2692,-2692,
		2684,-2684,2678,-2678,2670,-2670,2664,-2664,
		2656,-2656,2648,-2648,2642,-2642,2634,-2634,
		2628,-2628,2620,-2620,2614,-2614,2606,-2606,
		2600,-2600,2592,-2592,2584,-2584,2578,-2578,
		2572,-2572,2564,-2564,2558,-2558,2550,-2550,
		2544,-2544,2536,-2536,2530,-2530,2522,-2522,
		2516,-2516,2510,-2510,2502,-2502,2496,-2496,
		2488,-2488,2482,-2482,2476,-2476,2468,-2468,
		2462,-2462,2456,-2456,2448,-2448,2442,-2442,
		2436,-2436,2428,-2428,2422,-2422,2416,-2416,
		2410,-2410,2402,-2402,2396,-2396,2390,-2390,
		2384,-2384,2376,-2376,2370,-2370,2364,-2364,
		2358,-2358,2352,-2352,2344,-2344,2338,-2338,
		2332,-2332,2326,-2326,2320,-2320,2314,-2314,
		2308,-2308,2300,-2300,2294,-2294,2288,-2288,
		2282,-2282,2276,-2276,2270,-2270,2264,-2264,
		2258,-2258,2252,-2252,2246,-2246,2240,-2240,
		2234,-2234,2228,-2228,2222,-2222,2216,-2216,
		2210,-2210,2204,-2204,2198,-2198,2192,-2192,
		2186,-2186,2180,-2180,2174,-2174,2168,-2168,
		2162,-2162,2156,-2156,2150,-2150,2144,-2144,
		2138,-2138,2132,-2132,2128,-2128,2122,-2122,
		2116,-2116,2110,-2110,2104,-2104,2098,-2098,
		2092,-2092,2088,-2088,2082,-2082,2076,-2076,
		2070,-2070,2064,-2064,2060,-2060,2054,-2054,
		2048,-2048,2042,-2042,2037,-2037,2031,-2031,
		2026,-2026,2020,-2020,2015,-2015,2010,-2010,
		2004,-2004,1999,-1999,1993,-1993,1988,-1988,
		1983,-1983,1977,-1977,1972,-1972,1966,-1966,
		1961,-1961,1956,-1956,1951,-1951,1945,-1945,
		1940,-1940,1935,-1935,1930,-1930,1924,-1924,
		1919,-1919,1914,-1914,1909,-1909,1904,-1904,
		1898,-1898,1893,-1893,1888,-1888,1883,-1883,
		1878,-1878,1873,-1873,1868,-1868,1863,-1863,
		1858,-1858,1853,-1853,1848,-1848,1843,-1843,
		1838,-1838,1833,-1833,1828,-1828,1823,-1823,
		1818,-1818,1813,-1813,1808,-1808,1803,-1803,
		1798,-1798,1794,-1794,1789,-1789,1784,-1784,
		1779,-1779,1774,-1774,1769,-1769,1765,-1765,
		1760,-1760,1755,-1755,1750,-1750,1746,-1746,
		1741,-1741,1736,-1736,1732,-1732,1727,-1727,
		1722,-1722,1717,-1717,1713,-1713,1708,-1708,
		1704,-1704,1699,-1699,1694,-1694,1690,-1690,
		1685,-1685,1681,-1681,1676,-1676,1672,-1672,
		1667,-1667,1663,-1663,1658,-1658,1654,-1654,
		1649,-1649,1645,-1645,1640,-1640,1636,-1636,
		1631,-1631,1627,-1627,1623,-1623,1618,-1618,
		1614,-1614,1609,-1609,1605,-1605,1601,-1601,
		1596,-1596,1592,-1592,1588,-1588,1584,-1584,
		1579,-1579,1575,-1575,1571,-1571,1566,-1566,
		1562,-1562,1558,-1558,1554,-1554,1550,-1550,
		1545,-1545,1541,-1541,1537,-1537,1533,-1533,
		1529,-1529,1525,-1525,1520,-1520,1516,-1516,
		1512,-1512,1508,-1508,1504,-1504,1500,-1500,
		1496,-1496,1492,-1492,1488,-1488,1484,-1484,
		1480,-1480,1476,-1476,1472,-1472,1468,-1468,
		1464,-1464,1460,-1460,1456,-1456,1452,-1452,
		1448,-1448,1444,-1444,1440,-1440,1436,-1436,
		1433,-1433,1429,-1429,1425,-1425,1421,-1421,
		1417,-1417,1413,-1413,1409,-1409,1406,-1406,
		1402,-1402,1398,-1398,1394,-1394,1391,-1391,
		1387,-1387,1383,-1383,1379,-1379,1376,-1376,
		1372,-1372,1368,-1368,1364,-1364,1361,-1361,
		1357,-1357,1353,-1353,1350,-1350,1346,-1346,
		1342,-1342,1339,-1339,1335,-1335,1332,-1332,
		1328,-1328,1324,-1324,1321,-1321,1317,-1317,
		1314,-1314,1310,-1310,1307,-1307,1303,-1303,
		1300,-1300,1296,-1296,1292,-1292,1289,-1289,
		1286,-1286,1282,-1282,1279,-1279,1275,-1275,
		1272,-1272,1268,-1268,1265,-1265,1261,-1261,
		1258,-1258,1255,-1255,1251,-1251,1248,-1248,
		1244,-1244,1241,-1241,1238,-1238,1234,-1234,
		1231,-1231,1228,-1228,1224,-1224,1221,-1221,
		1218,-1218,1214,-1214,1211,-1211,1208,-1208,
		1205,-1205,1201,-1201,1198,-1198,1195,-1195,
		1192,-1192,1188,-1188,1185,-1185,1182,-1182,
		1179,-1179,1176,-1176,1172,-1172,1169,-1169,
		1166,-1166,1163,-1163,1160,-1160,1157,-1157,
		1154,-1154,1150,-1150,1147,-1147,1144,-1144,
		1141,-1141,1138,-1138,1135,-1135,1132,-1132,
		1129,-1129,1126,-1126,1123,-1123,1120,-1120,
		1117,-1117,1114,-1114,1111,-1111,1108,-1108,
		1105,-1105,1102,-1102,1099,-1099,1096,-1096,
		1093,-1093,1090,-1090,1087,-1087,1084,-1084,
		1081,-1081,1078,-1078,1075,-1075,1072,-1072,
		1069,-1069,1066,-1066,1064,-1064,1061,-1061,
		1058,-1058,1055,-1055,1052,-1052,1049,-1049,
		1046,-1046,1044,-1044,1041,-1041,1038,-1038,
		1035,-1035,1032,-1032,1030,-1030,1027,-1027,
		1024,-1024,1021,-1021,1018,-1018,1015,-1015,
		1013,-1013,1010,-1010,1007,-1007,1005,-1005,
		1002,-1002,999,-999,996,-996,994,-994,
		991,-991,988,-988,986,-986,983,-983,
		980,-980,978,-978,975,-975,972,-972,
		970,-970,967,-967,965,-965,962,-962,
		959,-959,957,-957,954,-954,952,-952,
		949,-949,946,-946,944,-944,941,-941,
		939,-939,936,-936,934,-934,931,-931,
		929,-929,926,-926,924,-924,921,-921,
		919,-919,916,-916,914,-914,911,-911,
		909,-909,906,-906,904,-904,901,-901,
		899,-899,897,-897,894,-894,892,-892,
		889,-889,887,-887,884,-884,882,-882,
		880,-880,877,-877,875,-875,873,-873,
		870,-870,868,-868,866,-866,863,-863,
		861,-861,858,-858,856,-856,854,-854,
		852,-852,849,-849,847,-847,845,-845,
		842,-842,840,-840,838,-838,836,-836,
		833,-833,831,-831,829,-829,827,-827,
		824,-824,822,-822,820,-820,818,-818,
		815,-815,813,-813,811,-811,809,-809,
		807,-807,804,-804,802,-802,800,-800,
		798,-798,796,-796,794,-794,792,-792,
		789,-789,787,-787,785,-785,783,-783,
		781,-781,779,-779,777,-777,775,-775,
		772,-772,770,-770,768,-768,766,-766,
		764,-764,762,-762,760,-760,758,-758,
		756,-756,754,-754,752,-752,750,-750,
		748,-748,746,-746,744,-744,742,-742,
		740,-740,738,-738,736,-736,734,-734,
		732,-732,730,-730,728,-728,726,-726,
		724,-724,722,-722,720,-720,718,-718,
		716,-716,714,-714,712,-712,710,-710,
		708,-708,706,-706,704,-704,703,-703,
		701,-701,699,-699,697,-697,695,-695,
		693,-693,691,-691,689,-689,688,-688,
		686,-686,684,-684,682,-682,680,-680,
		678,-678,676,-676,675,-675,673,-673,
		671,-671,669,-669,667,-667,666,-666,
		664,-664,662,-662,660,-660,658,-658,
		657,-657,655,-655,653,-653,651,-651,
		650,-650,648,-648,646,-646,644,-644,
		643,-643,641,-641,639,-639,637,-637,
		636,-636,634,-634,632,-632,630,-630,
		629,-629,627,-627,625,-625,624,-624,
		622,-622,620,-620,619,-619,617,-617,
		615,-615,614,-614,612,-612,610,-610,
		609,-609,607,-607,605,-605,604,-604,
		602,-602,600,-600,599,-599,597,-597,
		596,-596,594,-594,592,-592,591,-591,
		589,-589,588,-588,586,-586,584,-584,
		583,-583,581,-581,580,-580,578,-578,
		577,-577,575,-575,573,-573,572,-572,
		570,-570,569,-569,567,-567,566,-566,
		564,-564,563,-563,561,-561,560,-560,
		558,-558,557,-557,555,-555,554,-554,
		552,-552,551,-551,549,-549,548,-548,
		546,-546,545,-545,543,-543,542,-542,
		540,-540,539,-539,537,-537,536,-536,
		534,-534,533,-533,532,-532,530,-530,
		529,-529,527,-527,526,-526,524,-524,
		523,-523,522,-522,520,-520,519,-519,
		517,-517,516,-516,515,-515,513,-513,
		512,-512,510,-510,509,-509,507,-507,
		506,-506,505,-505,503,-503,502,-502,
		501,-501,499,-499,498,-498,497,-497,
		495,-495,494,-494,493,-493,491,-491,
		490,-490,489,-489,487,-487,486,-486,
		485,-485,483,-483,482,-482,481,-481,
		479,-479,478,-478,477,-477,476,-476,
		474,-474,473,-473,472,-472,470,-470,
		469,-469,468,-468,467,-467,465,-465,
		464,-464,463,-463,462,-462,460,-460,
		459,-459,458,-458,457,-457,455,-455,
		454,-454,453,-453,452,-452,450,-450,
		449,-449,448,-448,447,-447,446,-446,
		444,-444,443,-443,442,-442,441,-441,
		440,-440,438,-438,437,-437,436,-436,
		435,-435,434,-434,433,-433,431,-431,
		430,-430,429,-429,428,-428,427,-427,
		426,-426,424,-424,423,-423,422,-422,
		421,-421,420,-420,419,-419,418,-418,
		416,-416,415,-415,414,-414,413,-413,
		412,-412,411,-411,410,-410,409,-409,
		407,-407,406,-406,405,-405,404,-404,
		403,-403,402,-402,401,-401,400,-400,
		399,-399,398,-398,397,-397,396,-396,
		394,-394,393,-393,392,-392,391,-391,
		390,-390,389,-389,388,-388,387,-387,
		386,-386,385,-385,384,-384,383,-383,
		382,-382,381,-381,380,-380,379,-379,
		378,-378,377,-377,376,-376,375,-375,
		374,-374,373,-373,372,-372,371,-371,
		370,-370,369,-369,368,-368,367,-367,
		366,-366,365,-365,364,-364,363,-363,
		362,-362,361,-361,360,-360,359,-359,
		358,-358,357,-357,356,-356,355,-355,
		354,-354,353,-353,352,-352,351,-351,
		350,-350,349,-349,348,-348,347,-347,
		346,-346,345,-345,344,-344,344,-344,
		343,-343,342,-342,341,-341,340,-340,
		339,-339,338,-338,337,-337,336,-336,
		335,-335,334,-334,333,-333,333,-333,
		332,-332,331,-331,330,-330,329,-329,
		328,-328,327,-327,326,-326,325,-325,
		325,-325,324,-324,323,-323,322,-322,
		321,-321,320,-320,319,-319,318,-318,
		318,-318,317,-317,316,-316,315,-315,
		314,-314,313,-313,312,-312,312,-312,
		311,-311,310,-310,309,-309,308,-308,
		307,-307,307,-307,306,-306,305,-305,
		304,-304,303,-303,302,-302,302,-302,
		301,-301,300,-300,299,-299,298,-298,
		298,-298,297,-297,296,-296,295,-295,
		294,-294,294,-294,293,-293,292,-292,
		291,-291,290,-290,290,-290,289,-289,
		288,-288,287,-287,286,-286,286,-286,
		285,-285,284,-284,283,-283,283,-283,
		282,-282,281,-281,280,-280,280,-280,
		279,-279,278,-278,277,-277,277,-277,
		276,-276,275,-275,274,-274,274,-274,
		273,-273,272,-272,271,-271,271,-271,
		270,-270,269,-269,268,-268,268,-268,
		267,-267,266,-266,266,-266,265,-265,
		264,-264,263,-263,263,-263,262,-262,
		261,-261,261,-261,260,-260,259,-259,
		258,-258,258,-258,257,-257,256,-256,
		256,-256,255,-255,254,-254,253,-253,
		253,-253,252,-252,251,-251,251,-251,
		250,-250,249,-249,249,-249,248,-248,
		247,-247,247,-247,246,-246,245,-245,
		245,-245,244,-244,243,-243,243,-243,
		242,-242,241,-241,241,-241,240,-240,
		239,-239,239,-239,238,-238,238,-238,
		237,-237,236,-236,236,-236,235,-235,
		234,-234,234,-234,233,-233,232,-232,
		232,-232,231,-231,231,-231,230,-230,
		229,-229,229,-229,228,-228,227,-227,
		227,-227,226,-226,226,-226,225,-225,
		224,-224,224,-224,223,-223,223,-223,
		222,-222,221,-221,221,-221,220,-220,
		220,-220,219,-219,218,-218,218,-218,
		217,-217,217,-217,216,-216,215,-215,
		215,-215,214,-214,214,-214,213,-213,
		213,-213,212,-212,211,-211,211,-211,
		210,-210,210,-210,209,-209,209,-209,
		208,-208,207,-207,207,-207,206,-206,
		206,-206,205,-205,205,-205,204,-204,
		203,-203,203,-203,202,-202,202,-202,
		201,-201,201,-201,200,-200,200,-200,
		199,-199,199,-199,198,-198,198,-198,
		197,-197,196,-196,196,-196,195,-195,
		195,-195,194,-194,194,-194,193,-193,
		193,-193,192,-192,192,-192,191,-191,
		191,-191,190,-190,190,-190,189,-189,
		189,-189,188,-188,188,-188,187,-187,
		187,-187,186,-186,186,-186,185,-185,
		185,-185,184,-184,184,-184,183,-183,
		183,-183,182,-182,182,-182,181,-181,
		181,-181,180,-180,180,-180,179,-179,
		179,-179,178,-178,178,-178,177,-177,
		177,-177,176,-176,176,-176,175,-175,
		175,-175,174,-174,174,-174,173,-173,
		173,-173,172,-172,172,-172,172,-172,
		171,-171,171,-171,170,-170,170,-170,
		169,-169,169,-169,168,-168,168,-168,
		167,-167,167,-167,166,-166,166,-166,
		166,-166,165,-165,165,-165,164,-164,
		164,-164,163,-163,163,-163,162,-162,
		162,-162,162,-162,161,-161,161,-161,
		160,-160,160,-160,159,-159,159,-159,
		159,-159,158,-158,158,-158,157,-157,
		157,-157,156,-156,156,-156,156,-156,
		155,-155,155,-155,154,-154,154,-154,
		153,-153,153,-153,153,-153,152,-152,
		152,-152,151,-151,151,-151,151,-151,
		150,-150,150,-150,149,-149,149,-149,
		149,-149,148,-148,148,-148,147,-147,
		147,-147,147,-147,146,-146,146,-146,
		145,-145,145,-145,145,-145,144,-144,
		144,-144,143,-143,143,-143,143,-143,
		142,-142,142,-142,141,-141,141,-141,
		141,-141,140,-140,140,-140,140,-140,
		139,-139,139,-139,138,-138,138,-138,
		138,-138,137,-137,137,-137,137,-137,
		136,-136,136,-136,135,-135,135,-135,
		135,-135,134,-134,134,-134,134,-134,
		133,-133,133,-133,133,-133,132,-132,
		132,-132,131,-131,131,-131,131,-131,
		130,-130,130,-130,130,-130,129,-129,
		129,-129,129,-129,128,-128,128,-128,
		128,-128,127,-127,127,-127,126,-126,
		126,-126,126,-126,125,-125,125,-125,
		125,-125,124,-124,124,-124,124,-124,
		123,-123,123,-123,123,-123,122,-122,
		122,-122,122,-122,121,-121,121,-121,
		121,-121,120,-120,120,-120,120,-120,
		119,-119,119,-119,119,-119,119,-119,
		118,-118,118,-118,118,-118,117,-117,
		117,-117,117,-117,116,-116,116,-116,
		116,-116,115,-115,115,-115,115,-115,
		114,-114,114,-114,114,-114,113,-113,
		113,-113,113,-113,113,-113,112,-112,
		112,-112,112,-112,111,-111,111,-111,
		111,-111,110,-110,110,-110,110,-110,
		110,-110,109,-109,109,-109,109,-109,
		108,-108,108,-108,108,-108,107,-107,
		107,-107,107,-107,107,-107,106,-106,
		106,-106,106,-106,105,-105,105,-105,
		105,-105,105,-105,104,-104,104,-104,
		104,-104,103,-103,103,-103,103,-103,
		103,-103,102,-102,102,-102,102,-102,
		101,-101,101,-101,101,-101,101,-101,
		100,-100,100,-100,100,-100,100,-100,
		99,-99,99,-99,99,-99,99,-99,
		98,-98,98,-98,98,-98,97,-97,
		97,-97,97,-97,97,-97,96,-96,
		96,-96,96,-96,96,-96,95,-95,
		95,-95,95,-95,95,-95,94,-94,
		94,-94,94,-94,94,-94,93,-93,
		93,-93,93,-93,93,-93,92,-92,
		92,-92,92,-92,92,-92,91,-91,
		91,-91,91,-91,91,-91,90,-90,
		90,-90,90,-90,90,-90,89,-89,
		89,-89,89,-89,89,-89,88,-88,
		88,-88,88,-88,88,-88,87,-87,
		87,-87,87,-87,87,-87,86,-86,
		86,-86,86,-86,86,-86,86,-86,
		85,-85,85,-85,85,-85,85,-85,
		84,-84,84,-84,84,-84,84,-84,
		83,-83,83,-83,83,-83,83,-83,
		83,-83,82,-82,82,-82,82,-82,
		82,-82,81,-81,81,-81,81,-81,
		81,-81,81,-81,80,-80,80,-80,
		80,-80,80,-80,79,-79,79,-79,
		79,-79,79,-79,79,-79,78,-78,
		78,-78,78,-78,78,-78,78,-78,
		77,-77,77,-77,77,-77,77,-77,
		76,-76,76,-76,76,-76,76,-76,
		76,-76,75,-75,75,-75,75,-75,
		75,-75,75,-75,74,-74,74,-74,
		74,-74,74,-74,74,-74,73,-73,
		73,-73,73,-73,73,-73,73,-73,
		72,-72,72,-72,72,-72,72,-72,
		72,-72,71,-71,71,-71,71,-71,
		71,-71,71,-71,70,-70,70,-70,
		70,-70,70,-70,70,-70,70,-70,
		69,-69,69,-69,69,-69,69,-69,
		69,-69,68,-68,68,-68,68,-68,
		68,-68,68,-68,67,-67,67,-67,
		67,-67,67,-67,67,-67,67,-67,
		66,-66,66,-66,66,-66,66,-66,
		66,-66,65,-65,65,-65,65,-65,
		65,-65,65,-65,65,-65,64,-64,
		64,-64,64,-64,64,-64,64,-64,
		64,-64,63,-63,63,-63,63,-63,
		63,-63,63,-63,62,-62,62,-62,
		62,-62,62,-62,62,-62,62,-62,
		61,-61,61,-61,61,-61,61,-61,
		61,-61,61,-61,60,-60,60,-60,
		60,-60,60,-60,60,-60,60,-60,
		59,-59,59,-59,59,-59,59,-59,
		59,-59,59,-59,59,-59,58,-58,
		58,-58,58,-58,58,-58,58,-58,
		58,-58,57,-57,57,-57,57,-57,
		57,-57,57,-57,57,-57,56,-56,
		56,-56,56,-56,56,-56,56,-56,
		56,-56,56,-56,55,-55,55,-55,
		55,-55,55,-55,55,-55,55,-55,
		55,-55,54,-54,54,-54,54,-54,
		54,-54,54,-54,54,-54,53,-53,
		53,-53,53,-53,53,-53,53,-53,
		53,-53,53,-53,52,-52,52,-52,
		52,-52,52,-52,52,-52,52,-52,
		52,-52,51,-51,51,-51,51,-51,
		51,-51,51,-51,51,-51,51,-51,
		50,-50,50,-50,50,-50,50,-50,
		50,-50,50,-50,50,-50,50,-50,
		49,-49,49,-49,49,-49,49,-49,
		49,-49,49,-49,49,-49,48,-48,
		48,-48,48,-48,48,-48,48,-48,
		48,-48,48,-48,48,-48,47,-47,
		47,-47,47,-47,47,-47,47,-47,
		47,-47,47,-47,47,-47,46,-46,
		46,-46,46,-46,46,-46,46,-46,
		46,-46,46,-46,46,-46,45,-45,
		45,-45,45,-45,45,-45,45,-45,
		45,-45,45,-45,45,-45,44,-44,
		44,-44,44,-44,44,-44,44,-44,
		44,-44,44,-44,44,-44,43,-43,
		43,-43,43,-43,43,-43,43,-43,
		43,-43,43,-43,43,-43,43,-43,
		42,-42,42,-42,42,-42,42,-42,
		42,-42,42,-42,42,-42,42,-42,
		41,-41,41,-41,41,-41,41,-41,
		41,-41,41,-41,41,-41,41,-41,
		41,-41,40,-40,40,-40,40,-40,
		40,-40,40,-40,40,-40,40,-40,
		40,-40,40,-40,39,-39,39,-39,
		39,-39,39,-39,39,-39,39,-39,
		39,-39,39,-39,39,-39,39,-39,
		38,-38,38,-38,38,-38,38,-38,
		38,-38,38,-38,38,-38,38,-38,
		38,-38,37,-37,37,-37,37,-37,
		37,-37,37,-37,37,-37,37,-37,
		37,-37,37,-37,37,-37,36,-36,
		36,-36,36,-36,36,-36,36,-36,
		36,-36,36,-36,36,-36,36,-36,
		36,-36,35,-35,35,-35,35,-35,
		35,-35,35,-35,35,-35,35,-35,
		35,-35,35,-35,35,-35,35,-35,
		34,-34,34,-34,34,-34,34,-34,
		34,-34,34,-34,34,-34,34,-34,
		34,-34,34,-34,33,-33,33,-33,
		33,-33,33,-33,33,-33,33,-33,
		33,-33,33,-33,33,-33,33,-33,
		33,-33,32,-32,32,-32,32,-32,
		32,-32,32,-32,32,-32,32,-32,
		32,-32,32,-32,32,-32,32,-32,
		32,-32,31,-31,31,-31,31,-31,
		31,-31,31,-31,31,-31,31,-31,
		31,-31,31,-31,31,-31,31,-31,
		30,-30,30,-30,30,-30,30,-30,
		30,-30,30,-30,30,-30,30,-30,
		30,-30,30,-30,30,-30,30,-30,
		29,-29,29,-29,29,-29,29,-29,
		29,-29,29,-29,29,-29,29,-29,
		29,-29,29,-29,29,-29,29,-29,
		29,-29,28,-28,28,-28,28,-28,
		28,-28,28,-28,28,-28,28,-28,
		28,-28,28,-28,28,-28,28,-28,
		28,-28,28,-28,27,-27,27,-27,
		27,-27,27,-27,27,-27,27,-27,
		27,-27,27,-27,27,-27,27,-27,
		27,-27,27,-27,27,-27,26,-26,
		26,-26,26,-26,26,-26,26,-26,
		26,-26,26,-26,26,-26,26,-26,
		26,-26,26,-26,26,-26,26,-26,
		26,-26,25,-25,25,-25,25,-25,
		25,-25,25,-25,25,-25,25,-25,
		25,-25,25,-25,25,-25,25,-25,
		25,-25,25,-25,25,-25,25,-25,
		24,-24,24,-24,24,-24,24,-24,
		24,-24,24,-24,24,-24,24,-24,
		24,-24,24,-24,24,-24,24,-24,
		24,-24,24,-24,24,-24,23,-23,
		23,-23,23,-23,23,-23,23,-23,
		23,-23,23,-23,23,-23,23,-23,
		23,-23,23,-23,23,-23,23,-23,
		23,-23,23,-23,23,-23,22,-22,
		22,-22,22,-22,22,-22,22,-22,
		22,-22,22,-22,22,-22,22,-22,
		22,-22,22,-22,22,-22,22,-22,
		22,-22,22,-22,22,-22,21,-21,
		21,-21,21,-21,21,-21,21,-21,
		21,-21,21,-21,21,-21,21,-21,
		21,-21,21,-21,21,-21,21,-21,
		21,-21,21,-21,21,-21,21,-21,
		20,-20,20,-20,20,-20,20,-20,
		20,-20,20,-20,20,-20,20,-20,
		20,-20,20,-20,20,-20,20,-20,
		20,-20,20,-20,20,-20,20,-20,
		20,-20,20,-20,19,-19,19,-19,
		19,-19,19,-19,19,-19,19,-19,
		19,-19,19,-19,19,-19,19,-19,
		19,-19,19,-19,19,-19,19,-19,
		19,-19,19,-19,19,-19,19,-19,
		19,-19,18,-18,18,-18,18,-18,
		18,-18,18,-18,18,-18,18,-18,
		18,-18,18,-18,18,-18,18,-18,
		18,-18,18,-18,18,-18,18,-18,
		18,-18,18,-18,18,-18,18,-18,
		18,-18,17,-17,17,-17,17,-17,
		17,-17,17,-17,17,-17,17,-17,
		17,-17,17,-17,17,-17,17,-17,
		17,-17,17,-17,17,-17,17,-17,
		17,-17,17,-17,17,-17,17,-17,
		17,-17,17,-17,16,-16,16,-16,
		16,-16,16,-16,16,-16,16,-16,
		16,-16,16,-16,16,-16,16,-16,
		16,-16,16,-16,16,-16,16,-16,
		16,-16,16,-16,16,-16,16,-16,
		16,-16,16,-16,16,-16,16,-16,
		16,-16,15,-15,15,-15,15,-15,
		15,-15,15,-15,15,-15,15,-15,
		15,-15,15,-15,15,-15,15,-15,
		15,-15,15,-15,15,-15,15,-15,
		15,-15,15,-15,15,-15,15,-15,
		15,-15,15,-15,15,-15,15,-15,
		14,-14,14,-14,14,-14,14,-14,
		14,-14,14,-14,14,-14,14,-14,
		14,-14,14,-14,14,-14,14,-14,
		14,-14,14,-14,14,-14,14,-14,
		14,-14,14,-14,14,-14,14,-14,
		14,-14,14,-14,14,-14,14,-14,
		14,-14,14,-14,13,-13,13,-13,
		13,-13,13,-13,13,-13,13,-13,
		13,-13,13,-13,13,-13,13,-13,
		13,-13,13,-13,13,-13,13,-13,
		13,-13,13,-13,13,-13,13,-13,
		13,-13,13,-13,13,-13,13,-13,
		13,-13,13,-13,13,-13,13,-13,
		13,-13,12,-12,12,-12,12,-12,
		12,-12,12,-12,12,-12,12,-12,
		12,-12,12,-12,12,-12,12,-12,
		12,-12,12,-12,12,-12,12,-12,
		12,-12,12,-12,12,-12,12,-12,
		12,-12,12,-12,12,-12,12,-12,
		12,-12,12,-12,12,-12,12,-12,
		12,-12,12,-12,12,-12,11,-11,
		11,-11,11,-11,11,-11,11,-11,
		11,-11,11,-11,11,-11,11,-11,
		11,-11,11,-11,11,-11,11,-11,
		11,-11,11,-11,11,-11,11,-11,
		11,-11,11,-11,11,-11,11,-11,
		11,-11,11,-11,11,-11,11,-11,
		11,-11,11,-11,11,-11,11,-11,
		11,-11,11,-11,11,-11,10,-10,
		10,-10,10,-10,10,-10,10,-10,
		10,-10,10,-10,10,-10,10,-10,
		10,-10,10,-10,10,-10,10,-10,
		10,-10,10,-10,10,-10,10,-10,
		10,-10,10,-10,10,-10,10,-10,
		10,-10,10,-10,10,-10,10,-10,
		10,-10,10,-10,10,-10,10,-10,
		10,-10,10,-10,10,-10,10,-10,
		10,-10,10,-10,9,-9,9,-9,
		9,-9,9,-9,9,-9,9,-9,
		9,-9,9,-9,9,-9,9,-9,
		9,-9,9,-9,9,-9,9,-9,
		9,-9,9,-9,9,-9,9,-9,
		9,-9,9,-9,9,-9,9,-9,
		9,-9,9,-9,9,-9,9,-9,
		9,-9,9,-9,9,-9,9,-9,
		9,-9,9,-9,9,-9,9,-9,
		9,-9,9,-9,9,-9,9,-9,
		9,-9,8,-8,8,-8,8,-8,
		8,-8,8,-8,8,-8,8,-8,
		8,-8,8,-8,8,-8,8,-8,
		8,-8,8,-8,8,-8,8,-8,
		8,-8,8,-8,8,-8,8,-8,
		8,-8,8,-8,8,-8,8,-8,
		8,-8,8,-8,8,-8,8,-8,
		8,-8,8,-8,8,-8,8,-8,
		8,-8,8,-8,8,-8,8,-8,
		8,-8,8,-8,8,-8,8,-8,
		8,-8,8,-8,8,-8,8,-8,
		8,-8,7,-7,7,-7,7,-7,
		7,-7,7,-7,7,-7,7,-7,
		7,-7,7,-7,7,-7,7,-7,
		7,-7,7,-7,7,-7,7,-7,
		7,-7,7,-7,7,-7,7,-7,
		7,-7,7,-7,7,-7,7,-7,
		7,-7,7,-7,7,-7,7,-7,
		7,-7,7,-7,7,-7,7,-7,
		7,-7,7,-7,7,-7,7,-7,
		7,-7,7,-7,7,-7,7,-7,
		7,-7,7,-7,7,-7,7,-7,
		7,-7,7,-7,7,-7,7,-7,
		7,-7,7,-7,6,-6,6,-6,
		6,-6,6,-6,6,-6,6,-6,
		6,-6,6,-6,6,-6,6,-6,
		6,-6,6,-6,6,-6,6,-6,
		6,-6,6,-6,6,-6,6,-6,
		6,-6,6,-6,6,-6,6,-6,
		6,-6,6,-6,6,-6,6,-6,
		6,-6,6,-6,6,-6,6,-6,
		6,-6,6,-6,6,-6,6,-6,
		6,-6,6,-6,6,-6,6,-6,
		6,-6,6,-6,6,-6,6,-6,
		6,-6,6,-6,6,-6,6,-6,
		6,-6,6,-6,6,-6,6,-6,
		6,-6,6,-6,6,-6,6,-6,
		6,-6,6,-6,6,-6,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,5,-5,5,-5,
		5,-5,5,-5,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,4,-4,4,-4,4,-4,
		4,-4,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,3,-3,
		3,-3,3,-3,3,-3,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,2,-2,2,-2,2,-2,
		2,-2,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,1,-1,1,-1,1,-1,
		1,-1,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,
};

static const int sinetable_s[FM_OPSINENTS] = {
		4276,3464,3088,2840,2654,2506,2382,2276,
		2184,2102,2028,1960,1900,1842,1790,1740,
		1694,1652,1610,1572,1536,1500,1466,1436,
		1404,1376,1346,1320,1294,1268,1244,1220,
		1198,1176,1154,1134,1114,1094,1074,1056,
		1038,1020,1004,986,970,954,938,924,
		908,894,880,866,852,838,824,812,
		800,786,774,762,752,740,728,718,
		706,696,684,674,664,654,644,634,
		624,616,606,596,588,580,570,562,
		554,544,536,528,520,512,504,498,
		490,482,474,468,460,454,446,440,
		432,426,420,412,406,400,394,388,
		382,376,370,364,358,352,346,340,
		336,330,324,320,314,308,304,298,
		294,288,284,278,274,270,264,260,
		256,252,246,242,238,234,230,226,
		222,218,214,210,206,202,198,194,
		190,186,184,180,176,172,168,166,
		162,158,156,152,150,146,142,140,
		136,134,130,128,126,122,120,116,
		114,112,108,106,104,100,98,96,
		94,92,88,86,84,82,80,78,
		76,74,72,70,68,66,64,62,
		60,58,56,54,52,50,48,48,
		46,44,42,42,40,38,36,36,
		34,32,32,30,28,28,26,26,
		24,22,22,20,20,18,18,16,
		16,16,14,14,12,12,12,10,
		10,10,8,8,8,6,6,6,
		6,4,4,4,4,4,4,4,
		2,2,2,2,2,2,2,2,
		2,2,2,2,2,2,2,2,
		4,4,4,4,4,4,4,6,
		6,6,6,8,8,8,10,10,
		10,12,12,12,14,14,16,16,
		16,18,18,20,20,22,22,24,
		26,26,28,28,30,32,32,34,
		36,36,38,40,42,42,44,46,
		48,48,50,52,54,56,58,60,
		62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,92,94,
		96,98,100,104,106,108,112,114,
		116,120,122,126,128,130,134,136,
		140,142,146,150,152,156,158,162,
		166,168,172,176,180,184,186,190,
		194,198,202,206,210,214,218,222,
		226,230,234,238,242,246,252,256,
		260,264,270,274,278,284,288,294,
		298,304,308,314,320,324,330,336,
		340,346,352,358,364,370,376,382,
		388,394,400,406,412,420,426,432,
		440,446,454,460,468,474,482,490,
		498,504,512,520,528,536,544,554,
		562,570,580,588,596,606,616,624,
		634,644,654,664,674,684,696,706,
		718,728,740,752,762,774,786,800,
		812,824,838,852,866,880,894,908,
		924,938,954,970,986,1004,1020,1038,
		1056,1074,1094,1114,1134,1154,1176,1198,
		1220,1244,1268,1294,1320,1346,1376,1404,
		1436,1466,1500,1536,1572,1610,1652,1694,
		1740,1790,1842,1900,1960,2028,2102,2184,
		2276,2382,2506,2654,2840,3088,3464,4276,
		4277,3465,3089,2841,2655,2507,2383,2277,
		2185,2103,2029,1961,1901,1843,1791,1741,
		1695,1653,1611,1573,1537,1501,1467,1437,
		1405,1377,1347,1321,1295,1269,1245,1221,
		1199,1177,1155,1135,1115,1095,1075,1057,
		1039,1021,1005,987,971,955,939,925,
		909,895,881,867,853,839,825,813,
		801,787,775,763,753,741,729,719,
		707,697,685,675,665,655,645,635,
		625,617,607,597,589,581,571,563,
		555,545,537,529,521,513,505,499,
		491,483,475,469,461,455,447,441,
		433,427,421,413,407,401,395,389,
		383,377,371,365,359,353,347,341,
		337,331,325,321,315,309,305,299,
		295,289,285,279,275,271,265,261,
		257,253,247,243,239,235,231,227,
		223,219,215,211,207,203,199,195,
		191,187,185,181,177,173,169,167,
		163,159,157,153,151,147,143,141,
		137,135,131,129,127,123,121,117,
		115,113,109,107,105,101,99,97,
		95,93,89,87,85,83,81,79,
		77,75,73,71,69,67,65,63,
		61,59,57,55,53,51,49,49,
		47,45,43,43,41,39,37,37,
		35,33,33,31,29,29,27,27,
		25,23,23,21,21,19,19,17,
		17,17,15,15,13,13,13,11,
		11,11,9,9,9,7,7,7,
		7,5,5,5,5,5,5,5,
		3,3,3,3,3,3,3,3,
		3,3,3,3,3,3,3,3,
		5,5,5,5,5,5,5,7,
		7,7,7,9,9,9,11,11,
		11,13,13,13,15,15,17,17,
		17,19,19,21,21,23,23,25,
		27,27,29,29,31,33,33,35,
		37,37,39,41,43,43,45,47,
		49,49,51,53,55,57,59,61,
		63,65,67,69,71,73,75,77,
		79,81,83,85,87,89,93,95,
		97,99,101,105,107,109,113,115,
		117,121,123,127,129,131,135,137,
		141,143,147,151,153,157,159,163,
		167,169,173,177,181,185,187,191,
		195,199,203,207,211,215,219,223,
		227,231,235,239,243,247,253,257,
		261,265,271,275,279,285,289,295,
		299,305,309,315,321,325,331,337,
		341,347,353,359,365,371,377,383,
		389,395,401,407,413,421,427,433,
		441,447,455,461,469,475,483,491,
		499,505,513,521,529,537,545,555,
		563,571,581,589,597,607,617,625,
		635,645,655,665,675,685,697,707,
		719,729,741,753,763,775,787,801,
		813,825,839,853,867,881,895,909,
		925,939,955,971,987,1005,1021,1039,
		1057,1075,1095,1115,1135,1155,1177,1199,
		1221,1245,1269,1295,1321,1347,1377,1405,
		1437,1467,1501,1537,1573,1611,1653,1695,
		1741,1791,1843,1901,1961,2029,2103,2185,
		2277,2383,2507,2655,2841,3089,3465,4277,
};

static const int pmtable_s[2][8][FM_LFOENTS] = {
	{
		{
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
		},
		{
			0,2,5,8,10,13,16,18,
			21,23,26,29,31,34,36,39,
			41,44,46,49,51,53,56,58,
			60,62,65,67,69,71,73,75,
			77,79,80,82,84,86,87,89,
			90,92,93,95,96,97,98,99,
			100,101,102,103,104,105,105,106,
			107,107,108,108,108,108,109,109,
			109,109,109,108,108,108,108,107,
			107,106,105,105,104,103,102,101,
			100,99,98,97,96,95,93,92,
			90,89,87,86,84,82,80,79,
			77,75,73,71,69,67,65,62,
			60,58,56,53,51,49,46,44,
			41,39,36,34,31,29,26,23,
			21,18,16,13,10,8,5,2,
			0,-2,-5,-8,-10,-13,-16,-18,
			-21,-23,-26,-29,-31,-34,-36,-39,
			-41,-44,-46,-49,-51,-53,-56,-58,
			-60,-62,-65,-67,-69,-71,-73,-75,
			-77,-79,-80,-82,-84,-86,-87,-89,
			-90,-92,-93,-95,-96,-97,-98,-99,
			-100,-101,-102,-103,-104,-105,-105,-106,
			-107,-107,-108,-108,-108,-108,-109,-109,
			-109,-109,-109,-108,-108,-108,-108,-107,
			-107,-106,-105,-105,-104,-103,-102,-101,
			-100,-99,-98,-97,-96,-95,-93,-92,
			-90,-89,-87,-86,-84,-82,-80,-79,
			-77,-75,-73,-71,-69,-67,-65,-62,
			-60,-58,-56,-53,-51,-49,-46,-44,
			-41,-39,-36,-34,-31,-29,-26,-23,
			-21,-18,-16,-13,-10,-8,-5,-2,
		},
		{
			0,5,10,16,21,26,32,37,
			42,47,53,58,63,68,73,78,
			83,88,93,98,102,107,112,116,
			121,125,130,134,138,142,146,150,
			154,158,161,165,168,172,175,178,
			181,184,187,190,192,195,197,199,
			201,203,205,207,209,210,211,213,
			214,215,216,216,217,217,218,218,
			218,218,218,217,217,216,216,215,
			214,213,211,210,209,207,205,203,
			201,199,197,195,192,190,187,184,
			181,178,175,172,168,165,161,158,
			154,150,146,142,138,134,130,125,
			121,116,112,107,102,98,93,88,
			83,78,73,68,63,58,53,47,
			42,37,32,26,21,16,10,5,
			0,-5,-10,-16,-21,-26,-32,-37,
			-42,-47,-53,-58,-63,-68,-73,-78,
			-83,-88,-93,-98,-102,-107,-112,-116,
			-121,-125,-130,-134,-138,-142,-146,-150,
			-154,-158,-161,-165,-168,-172,-175,-178,
			-181,-184,-187,-190,-192,-195,-197,-199,
			-201,-203,-205,-207,-209,-210,-211,-213,
			-214,-215,-216,-216,-217,-217,-218,-218,
			-218,-218,-218,-217,-217,-216,-216,-215,
			-214,-213,-211,-210,-209,-207,-205,-203,
			-201,-199,-197,-195,-192,-190,-187,-184,
			-181,-178,-175,-172,-168,-165,-161,-158,
			-154,-150,-146,-142,-138,-134,-130,-125,
			-121,-116,-112,-107,-102,-98,-93,-88,
			-83,-78,-73,-68,-63,-58,-53,-47,
			-42,-37,-32,-26,-21,-16,-10,-5,
		},
		{
			0,8,16,24,32,40,48,56,
			63,71,79,87,95,102,110,117,
			125,132,140,147,154,161,168,175,
			182,188,195,201,207,214,220,225,
			231,237,242,248,253,258,263,267,
			272,276,281,285,288,292,296,299,
			302,305,308,311,313,315,317,319,
			321,322,324,325,326,326,327,327,
			327,327,327,326,326,325,324,322,
			321,319,317,315,313,311,308,305,
			302,299,296,292,288,285,281,276,
			272,267,263,258,253,248,242,237,
			231,225,220,214,207,201,195,188,
			182,175,168,161,154,147,140,132,
			125,117,110,102,95,87,79,71,
			63,56,48,40,32,24,16,8,
			0,-8,-16,-24,-32,-40,-48,-56,
			-63,-71,-79,-87,-95,-102,-110,-117,
			-125,-132,-140,-147,-154,-161,-168,-175,
			-182,-188,-195,-201,-207,-214,-220,-225,
			-231,-237,-242,-248,-253,-258,-263,-267,
			-272,-276,-281,-285,-288,-292,-296,-299,
			-302,-305,-308,-311,-313,-315,-317,-319,
			-321,-322,-324,-325,-326,-326,-327,-327,
			-327,-327,-327,-326,-326,-325,-324,-322,
			-321,-319,-317,-315,-313,-311,-308,-305,
			-302,-299,-296,-292,-288,-285,-281,-276,
			-272,-267,-263,-258,-253,-248,-242,-237,
			-231,-225,-220,-214,-207,-201,-195,-188,
			-182,-175,-168,-161,-154,-147,-140,-132,
			-125,-117,-110,-102,-95,-87,-79,-71,
			-63,-56,-48,-40,-32,-24,-16,-8,
		},
		{
			0,10,21,32,42,53,64,74,
			85,95,106,116,126,137,147,157,
			167,177,186,196,205,215,224,233,
			242,251,260,268,277,285,293,301,
			308,316,323,330,337,344,350,357,
			363,369,374,380,385,390,394,399,
			403,407,411,414,418,421,423,426,
			428,430,432,433,434,435,436,436,
			436,436,436,435,434,433,432,430,
			428,426,423,421,418,414,411,407,
			403,399,394,390,385,380,374,369,
			363,357,350,344,337,330,323,316,
			308,301,293,285,277,268,260,251,
			242,233,224,215,205,196,186,177,
			167,157,147,137,126,116,106,95,
			85,74,64,53,42,32,21,10,
			0,-10,-21,-32,-42,-53,-64,-74,
			-85,-95,-106,-116,-126,-137,-147,-157,
			-167,-177,-186,-196,-205,-215,-224,-233,
			-242,-251,-260,-268,-277,-285,-293,-301,
			-308,-316,-323,-330,-337,-344,-350,-357,
			-363,-369,-374,-380,-385,-390,-394,-399,
			-403,-407,-411,-414,-418,-421,-423,-426,
			-428,-430,-432,-433,-434,-435,-436,-436,
			-436,-436,-436,-435,-434,-433,-432,-430,
			-428,-426,-423,-421,-418,-414,-411,-407,
			-403,-399,-394,-390,-385,-380,-374,-369,
			-363,-357,-350,-344,-337,-330,-323,-316,
			-308,-301,-293,-285,-277,-268,-260,-251,
			-242,-233,-224,-215,-205,-196,-186,-177,
			-167,-157,-147,-137,-126,-116,-106,-95,
			-85,-74,-64,-53,-42,-32,-21,-10,
		},
		{
			0,16,32,48,64,80,96,112,
			127,143,159,174,190,205,220,235,
			250,265,280,294,308,323,336,350,
			364,377,390,403,415,428,440,451,
			463,474,485,496,506,516,526,535,
			544,553,562,570,577,585,592,599,
			605,611,617,622,627,631,635,639,
			642,645,648,650,652,653,654,655,
			655,655,654,653,652,650,648,645,
			642,639,635,631,627,622,617,611,
			605,599,592,585,577,570,562,553,
			544,535,526,516,506,496,485,474,
			463,451,440,428,415,403,390,377,
			364,350,336,323,308,294,280,265,
			250,235,220,205,190,174,159,143,
			127,112,96,80,64,48,32,16,
			0,-16,-32,-48,-64,-80,-96,-112,
			-127,-143,-159,-174,-190,-205,-220,-235,
			-250,-265,-280,-294,-308,-323,-336,-350,
			-364,-377,-390,-403,-415,-428,-440,-451,
			-463,-474,-485,-496,-506,-516,-526,-535,
			-544,-553,-562,-570,-577,-585,-592,-599,
			-605,-611,-617,-622,-627,-631,-635,-639,
			-642,-645,-648,-650,-652,-653,-654,-655,
			-655,-655,-654,-653,-652,-650,-648,-645,
			-642,-639,-635,-631,-627,-622,-617,-611,
			-605,-599,-592,-585,-577,-570,-562,-553,
			-544,-535,-526,-516,-506,-496,-485,-474,
			-463,-451,-440,-428,-415,-403,-390,-377,
			-364,-350,-336,-323,-308,-294,-280,-265,
			-250,-235,-220,-205,-190,-174,-159,-143,
			-127,-112,-96,-80,-64,-48,-32,-16,
		},
		{
			0,32,64,96,128,160,192,224,
			255,287,318,349,380,411,441,471,
			501,531,560,589,617,646,673,701,
			728,754,780,806,831,856,880,903,
			926,949,971,992,1013,1033,1052,1071,
			1089,1107,1124,1140,1155,1170,1184,1198,
			1210,1222,1234,1244,1254,1263,1271,1278,
			1285,1291,1296,1300,1304,1307,1309,1310,
			1310,1310,1309,1307,1304,1300,1296,1291,
			1285,1278,1271,1263,1254,1244,1234,1222,
			1210,1198,1184,1170,1155,1140,1124,1107,
			1089,1071,1052,1033,1013,992,971,949,
			926,903,880,856,831,806,780,754,
			728,701,673,646,617,589,560,531,
			501,471,441,411,380,349,318,287,
			255,224,192,160,128,96,64,32,
			0,-32,-64,-96,-128,-160,-192,-224,
			-255,-287,-318,-349,-380,-411,-441,-471,
			-501,-531,-560,-589,-617,-646,-673,-701,
			-728,-754,-780,-806,-831,-856,-880,-903,
			-926,-949,-971,-992,-1013,-1033,-1052,-1071,
			-1089,-1107,-1124,-1140,-1155,-1170,-1184,-1198,
			-1210,-1222,-1234,-1244,-1254,-1263,-1271,-1278,
			-1285,-1291,-1296,-1300,-1304,-1307,-1309,-1310,
			-1310,-1310,-1309,-1307,-1304,-1300,-1296,-1291,
			-1285,-1278,-1271,-1263,-1254,-1244,-1234,-1222,
			-1210,-1198,-1184,-1170,-1155,-1140,-1124,-1107,
			-1089,-1071,-1052,-1033,-1013,-992,-971,-949,
			-926,-903,-880,-856,-831,-806,-780,-754,
			-728,-701,-673,-646,-617,-589,-560,-531,
			-501,-471,-441,-411,-380,-349,-318,-287,
			-255,-224,-192,-160,-128,-96,-64,-32,
		},
		{
			0,64,128,192,256,320,384,448,
			511,574,636,699,760,822,883,943,
			1003,1062,1120,1178,1235,1292,1347,1402,
			1456,1509,1561,1612,1663,1712,1760,1807,
			1853,1898,1942,1984,2026,2066,2105,2143,
			2179,2214,2248,2280,2311,2341,2369,2396,
			2421,2445,2468,2489,2508,2526,2542,2557,
			2571,2582,2593,2601,2608,2614,2618,2620,
			2621,2620,2618,2614,2608,2601,2593,2582,
			2571,2557,2542,2526,2508,2489,2468,2445,
			2421,2396,2369,2341,2311,2280,2248,2214,
			2179,2143,2105,2066,2026,1984,1942,1898,
			1853,1807,1760,1712,1663,1612,1561,1509,
			1456,1402,1347,1292,1235,1178,1120,1062,
			1003,943,883,822,760,699,636,574,
			511,448,384,320,256,192,128,64,
			0,-64,-128,-192,-256,-320,-384,-448,
			-511,-574,-636,-699,-760,-822,-883,-943,
			-1003,-1062,-1120,-1178,-1235,-1292,-1347,-1402,
			-1456,-1509,-1561,-1612,-1663,-1712,-1760,-1807,
			-1853,-1898,-1942,-1984,-2026,-2066,-2105,-2143,
			-2179,-2214,-2248,-2280,-2311,-2341,-2369,-2396,
			-2421,-2445,-2468,-2489,-2508,-2526,-2542,-2557,
			-2571,-2582,-2593,-2601,-2608,-2614,-2618,-2620,
			-2621,-2620,-2618,-2614,-2608,-2601,-2593,-2582,
			-2571,-2557,-2542,-2526,-2508,-2489,-2468,-2445,
			-2421,-2396,-2369,-2341,-2311,-2280,-2248,-2214,
			-2179,-2143,-2105,-2066,-2026,-1984,-1942,-1898,
			-1853,-1807,-1760,-1712,-1663,-1612,-1561,-1509,
			-1456,-1402,-1347,-1292,-1235,-1178,-1120,-1062,
			-1003,-943,-883,-822,-760,-699,-636,-574,
			-511,-448,-384,-320,-256,-192,-128,-64,
		},
	},
	{
		{
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
		},
		{
			0,2,4,6,8,10,12,14,
			15,17,19,21,23,25,27,29,
			31,33,35,36,38,40,42,43,
			45,47,48,50,51,53,55,56,
			57,59,60,62,63,64,65,66,
			68,69,70,71,72,73,74,74,
			75,76,77,77,78,78,79,79,
			80,80,81,81,81,81,81,81,
			81,81,81,81,81,81,81,80,
			80,79,79,78,78,77,77,76,
			75,74,74,73,72,71,70,69,
			68,66,65,64,63,62,60,59,
			57,56,55,53,51,50,48,47,
			45,43,42,40,38,36,35,33,
			31,29,27,25,23,21,19,17,
			15,14,12,10,8,6,4,2,
			0,-2,-4,-6,-8,-10,-12,-14,
			-15,-17,-19,-21,-23,-25,-27,-29,
			-31,-33,-35,-36,-38,-40,-42,-43,
			-45,-47,-48,-50,-51,-53,-55,-56,
			-57,-59,-60,-62,-63,-64,-65,-66,
			-68,-69,-70,-71,-72,-73,-74,-74,
			-75,-76,-77,-77,-78,-78,-79,-79,
			-80,-80,-81,-81,-81,-81,-81,-81,
			-81,-81,-81,-81,-81,-81,-81,-80,
			-80,-79,-79,-78,-78,-77,-77,-76,
			-75,-74,-74,-73,-72,-71,-70,-69,
			-68,-66,-65,-64,-63,-62,-60,-59,
			-57,-56,-55,-53,-51,-50,-48,-47,
			-45,-43,-42,-40,-38,-36,-35,-33,
			-31,-29,-27,-25,-23,-21,-19,-17,
			-15,-14,-12,-10,-8,-6,-4,-2,
		},
		{
			0,4,8,12,16,20,24,28,
			31,35,39,43,47,51,55,58,
			62,66,70,73,77,80,84,87,
			91,94,97,100,103,107,110,112,
			115,118,121,124,126,129,131,133,
			136,138,140,142,144,146,148,149,
			151,152,154,155,156,157,158,159,
			160,161,162,162,163,163,163,163,
			163,163,163,163,163,162,162,161,
			160,159,158,157,156,155,154,152,
			151,149,148,146,144,142,140,138,
			136,133,131,129,126,124,121,118,
			115,112,110,107,103,100,97,94,
			91,87,84,80,77,73,70,66,
			62,58,55,51,47,43,39,35,
			31,28,24,20,16,12,8,4,
			0,-4,-8,-12,-16,-20,-24,-28,
			-31,-35,-39,-43,-47,-51,-55,-58,
			-62,-66,-70,-73,-77,-80,-84,-87,
			-91,-94,-97,-100,-103,-107,-110,-112,
			-115,-118,-121,-124,-126,-129,-131,-133,
			-136,-138,-140,-142,-144,-146,-148,-149,
			-151,-152,-154,-155,-156,-157,-158,-159,
			-160,-161,-162,-162,-163,-163,-163,-163,
			-163,-163,-163,-163,-163,-162,-162,-161,
			-160,-159,-158,-157,-156,-155,-154,-152,
			-151,-149,-148,-146,-144,-142,-140,-138,
			-136,-133,-131,-129,-126,-124,-121,-118,
			-115,-112,-110,-107,-103,-100,-97,-94,
			-91,-87,-84,-80,-77,-73,-70,-66,
			-62,-58,-55,-51,-47,-43,-39,-35,
			-31,-28,-24,-20,-16,-12,-8,-4,
		},
		{
			0,8,16,24,32,40,48,56,
			63,71,79,87,95,102,110,117,
			125,132,140,147,154,161,168,175,
			182,188,195,201,207,214,220,225,
			231,237,242,248,253,258,263,267,
			272,276,281,285,288,292,296,299,
			302,305,308,311,313,315,317,319,
			321,322,324,325,326,326,327,327,
			327,327,327,326,326,325,324,322,
			321,319,317,315,313,311,308,305,
			302,299,296,292,288,285,281,276,
			272,267,263,258,253,248,242,237,
			231,225,220,214,207,201,195,188,
			182,175,168,161,154,147,140,132,
			125,117,110,102,95,87,79,71,
			63,56,48,40,32,24,16,8,
			0,-8,-16,-24,-32,-40,-48,-56,
			-63,-71,-79,-87,-95,-102,-110,-117,
			-125,-132,-140,-147,-154,-161,-168,-175,
			-182,-188,-195,-201,-207,-214,-220,-225,
			-231,-237,-242,-248,-253,-258,-263,-267,
			-272,-276,-281,-285,-288,-292,-296,-299,
			-302,-305,-308,-311,-313,-315,-317,-319,
			-321,-322,-324,-325,-326,-326,-327,-327,
			-327,-327,-327,-326,-326,-325,-324,-322,
			-321,-319,-317,-315,-313,-311,-308,-305,
			-302,-299,-296,-292,-288,-285,-281,-276,
			-272,-267,-263,-258,-253,-248,-242,-237,
			-231,-225,-220,-214,-207,-201,-195,-188,
			-182,-175,-168,-161,-154,-147,-140,-132,
			-125,-117,-110,-102,-95,-87,-79,-71,
			-63,-56,-48,-40,-32,-24,-16,-8,
		},
		{
			0,20,40,60,80,100,120,140,
			159,179,199,218,237,256,275,294,
			313,331,350,368,386,403,421,438,
			455,471,487,503,519,535,550,564,
			579,593,606,620,633,645,657,669,
			681,692,702,712,722,731,740,748,
			756,764,771,777,783,789,794,799,
			803,807,810,813,815,816,818,818,
			819,818,818,816,815,813,810,807,
			803,799,794,789,783,777,771,764,
			756,748,740,731,722,712,702,692,
			681,669,657,645,633,620,606,593,
			579,564,550,535,519,503,487,471,
			455,438,421,403,386,368,350,331,
			313,294,275,256,237,218,199,179,
			159,140,120,100,80,60,40,20,
			0,-20,-40,-60,-80,-100,-120,-140,
			-159,-179,-199,-218,-237,-256,-275,-294,
			-313,-331,-350,-368,-386,-403,-421,-438,
			-455,-471,-487,-503,-519,-535,-550,-564,
			-579,-593,-606,-620,-633,-645,-657,-669,
			-681,-692,-702,-712,-722,-731,-740,-748,
			-756,-764,-771,-777,-783,-789,-794,-799,
			-803,-807,-810,-813,-815,-816,-818,-818,
			-819,-818,-818,-816,-815,-813,-810,-807,
			-803,-799,-794,-789,-783,-777,-771,-764,
			-756,-748,-740,-731,-722,-712,-702,-692,
			-681,-669,-657,-645,-633,-620,-606,-593,
			-579,-564,-550,-535,-519,-503,-487,-471,
			-455,-438,-421,-403,-386,-368,-350,-331,
			-313,-294,-275,-256,-237,-218,-199,-179,
			-159,-140,-120,-100,-80,-60,-40,-20,
		},
		{
			0,40,80,120,160,200,240,280,
			319,358,398,436,475,513,551,589,
			626,663,700,736,772,807,842,876,
			910,943,975,1007,1039,1070,1100,1129,
			1158,1186,1213,1240,1266,1291,1315,1339,
			1362,1384,1405,1425,1444,1463,1481,1497,
			1513,1528,1542,1555,1567,1579,1589,1598,
			1606,1614,1620,1626,1630,1633,1636,1637,
			1638,1637,1636,1633,1630,1626,1620,1614,
			1606,1598,1589,1579,1567,1555,1542,1528,
			1513,1497,1481,1463,1444,1425,1405,1384,
			1362,1339,1315,1291,1266,1240,1213,1186,
			1158,1129,1100,1070,1039,1007,975,943,
			910,876,842,807,772,736,700,663,
			626,589,551,513,475,436,398,358,
			319,280,240,200,160,120,80,40,
			0,-40,-80,-120,-160,-200,-240,-280,
			-319,-358,-398,-436,-475,-513,-551,-589,
			-626,-663,-700,-736,-772,-807,-842,-876,
			-910,-943,-975,-1007,-1039,-1070,-1100,-1129,
			-1158,-1186,-1213,-1240,-1266,-1291,-1315,-1339,
			-1362,-1384,-1405,-1425,-1444,-1463,-1481,-1497,
			-1513,-1528,-1542,-1555,-1567,-1579,-1589,-1598,
			-1606,-1614,-1620,-1626,-1630,-1633,-1636,-1637,
			-1638,-1637,-1636,-1633,-1630,-1626,-1620,-1614,
			-1606,-1598,-1589,-1579,-1567,-1555,-1542,-1528,
			-1513,-1497,-1481,-1463,-1444,-1425,-1405,-1384,
			-1362,-1339,-1315,-1291,-1266,-1240,-1213,-1186,
			-1158,-1129,-1100,-1070,-1039,-1007,-975,-943,
			-910,-876,-842,-807,-772,-736,-700,-663,
			-626,-589,-551,-513,-475,-436,-398,-358,
			-319,-280,-240,-200,-160,-120,-80,-40,
		},
		{
			0,160,321,482,642,802,961,1120,
			1278,1435,1592,1747,1902,2055,2207,2358,
			2507,2655,2802,2946,3089,3230,3369,3506,
			3640,3773,3903,4031,4157,4280,4401,4518,
			4634,4746,4855,4962,5066,5166,5263,5358,
			5449,5536,5621,5702,5779,5853,5924,5991,
			6054,6114,6170,6222,6271,6316,6357,6394,
			6427,6457,6482,6504,6522,6535,6545,6551,
			6553,6551,6545,6535,6522,6504,6482,6457,
			6427,6394,6357,6316,6271,6222,6170,6114,
			6054,5991,5924,5853,5779,5702,5621,5536,
			5449,5358,5263,5166,5066,4962,4855,4746,
			4634,4518,4401,4280,4157,4031,3903,3773,
			3640,3506,3369,3230,3089,2946,2802,2655,
			2507,2358,2207,2055,1902,1747,1592,1435,
			1278,1120,961,802,642,482,321,160,
			0,-160,-321,-482,-642,-802,-961,-1120,
			-1278,-1435,-1592,-1747,-1902,-2055,-2207,-2358,
			-2507,-2655,-2802,-2946,-3089,-3230,-3369,-3506,
			-3640,-3773,-3903,-4031,-4157,-4280,-4401,-4518,
			-4634,-4746,-4855,-4962,-5066,-5166,-5263,-5358,
			-5449,-5536,-5621,-5702,-5779,-5853,-5924,-5991,
			-6054,-6114,-6170,-6222,-6271,-6316,-6357,-6394,
			-6427,-6457,-6482,-6504,-6522,-6535,-6545,-6551,
			-6553,-6551,-6545,-6535,-6522,-6504,-6482,-6457,
			-6427,-6394,-6357,-6316,-6271,-6222,-6170,-6114,
			-6054,-5991,-5924,-5853,-5779,-5702,-5621,-5536,
			-5449,-5358,-5263,-5166,-5066,-4962,-4855,-4746,
			-4634,-4518,-4401,-4280,-4157,-4031,-3903,-3773,
			-3640,-3506,-3369,-3230,-3089,-2946,-2802,-2655,
			-2507,-2358,-2207,-2055,-1902,-1747,-1592,-1435,
			-1278,-1120,-961,-802,-642,-482,-321,-160,
		},
		{
			0,281,562,843,1124,1403,1682,1960,
			2237,2512,2786,3058,3329,3597,3863,4127,
			4388,4647,4903,5156,5406,5652,5896,6135,
			6371,6603,6831,7055,7275,7491,7701,7908,
			8109,8306,8497,8684,8865,9041,9211,9376,
			9535,9689,9837,9978,10114,10244,10367,10484,
			10595,10700,10798,10889,10974,11053,11125,11190,
			11248,11299,11344,11382,11413,11437,11454,11465,
			11468,11465,11454,11437,11413,11382,11344,11299,
			11248,11190,11125,11053,10974,10889,10798,10700,
			10595,10484,10367,10244,10114,9978,9837,9689,
			9535,9376,9211,9041,8865,8684,8497,8306,
			8109,7908,7701,7491,7275,7055,6831,6603,
			6371,6135,5896,5652,5406,5156,4903,4647,
			4388,4127,3863,3597,3329,3058,2786,2512,
			2237,1960,1682,1403,1124,843,562,281,
			0,-281,-562,-843,-1124,-1403,-1682,-1960,
			-2237,-2512,-2786,-3058,-3329,-3597,-3863,-4127,
			-4388,-4647,-4903,-5156,-5406,-5652,-5896,-6135,
			-6371,-6603,-6831,-7055,-7275,-7491,-7701,-7908,
			-8109,-8306,-8497,-8684,-8865,-9041,-9211,-9376,
			-9535,-9689,-9837,-9978,-10114,-10244,-10367,-10484,
			-10595,-10700,-10798,-10889,-10974,-11053,-11125,-11190,
			-11248,-11299,-11344,-11382,-11413,-11437,-11454,-11465,
			-11468,-11465,-11454,-11437,-11413,-11382,-11344,-11299,
			-11248,-11190,-11125,-11053,-10974,-10889,-10798,-10700,
			-10595,-10484,-10367,-10244,-10114,-9978,-9837,-9689,
			-9535,-9376,-9211,-9041,-8865,-8684,-8497,-8306,
			-8109,-7908,-7701,-7491,-7275,-7055,-6831,-6603,
			-6371,-6135,-5896,-5652,-5406,-5156,-4903,-4647,
			-4388,-4127,-3863,-3597,-3329,-3058,-2786,-2512,
			-2237,-1960,-1682,-1403,-1124,-843,-562,-281,
		},
	},
};

static const uint amtable_s[2][4][FM_LFOENTS] = {
	{
		{
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
		},
		{
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			8,8,8,8,8,8,8,8,
			8,8,8,8,8,8,8,8,
			16,16,16,16,16,16,16,16,
			16,16,16,16,16,16,16,16,
			24,24,24,24,24,24,24,24,
			24,24,24,24,24,24,24,24,
			32,32,32,32,32,32,32,32,
			32,32,32,32,32,32,32,32,
			40,40,40,40,40,40,40,40,
			40,40,40,40,40,40,40,40,
			48,48,48,48,48,48,48,48,
			48,48,48,48,48,48,48,48,
			56,56,56,56,56,56,56,56,
			56,56,56,56,56,56,56,56,
			64,64,64,64,64,64,64,64,
			64,64,64,64,64,64,64,64,
			72,72,72,72,72,72,72,72,
			72,72,72,72,72,72,72,72,
			80,80,80,80,80,80,80,80,
			80,80,80,80,80,80,80,80,
			88,88,88,88,88,88,88,88,
			88,88,88,88,88,88,88,88,
			96,96,96,96,96,96,96,96,
			96,96,96,96,96,96,96,96,
			104,104,104,104,104,104,104,104,
			104,104,104,104,104,104,104,104,
			112,112,112,112,112,112,112,112,
			112,112,112,112,112,112,112,112,
			120,120,120,120,120,120,120,120,
			120,120,120,120,120,120,120,120,
		},
		{
			0,0,0,0,8,8,8,8,
			16,16,16,16,24,24,24,24,
			32,32,32,32,40,40,40,40,
			48,48,48,48,56,56,56,56,
			64,64,64,64,72,72,72,72,
			80,80,80,80,88,88,88,88,
			96,96,96,96,104,104,104,104,
			112,112,112,112,120,120,120,120,
			128,128,128,128,136,136,136,136,
			144,144,144,144,152,152,152,152,
			160,160,160,160,168,168,168,168,
			176,176,176,176,184,184,184,184,
			192,192,192,192,200,200,200,200,
			208,208,208,208,216,216,216,216,
			224,224,224,224,232,232,232,232,
			240,240,240,240,248,248,248,248,
			256,256,256,256,264,264,264,264,
			272,272,272,272,280,280,280,280,
			288,288,288,288,296,296,296,296,
			304,304,304,304,312,312,312,312,
			320,320,320,320,328,328,328,328,
			336,336,336,336,344,344,344,344,
			352,352,352,352,360,360,360,360,
			368,368,368,368,376,376,376,376,
			384,384,384,384,392,392,392,392,
			400,400,400,400,408,408,408,408,
			416,416,416,416,424,424,424,424,
			432,432,432,432,440,440,440,440,
			448,448,448,448,456,456,456,456,
			464,464,464,464,472,472,472,472,
			480,480,480,480,488,488,488,488,
			496,496,496,496,504,504,504,504,
		},
		{
			0,0,8,8,16,16,24,24,
			32,32,40,40,48,48,56,56,
			64,64,72,72,80,80,88,88,
			96,96,104,104,112,112,120,120,
			128,128,136,136,144,144,152,152,
			160,160,168,168,176,176,184,184,
			192,192,200,200,208,208,216,216,
			224,224,232,232,240,240,248,248,
			256,256,264,264,272,272,280,280,
			288,288,296,296,304,304,312,312,
			320,320,328,328,336,336,344,344,
			352,352,360,360,368,368,376,376,
			384,384,392,392,400,400,408,408,
			416,416,424,424,432,432,440,440,
			448,448,456,456,464,464,472,472,
			480,480,488,488,496,496,504,504,
			512,512,520,520,528,528,536,536,
			544,544,552,552,560,560,568,568,
			576,576,584,584,592,592,600,600,
			608,608,616,616,624,624,632,632,
			640,640,648,648,656,656,664,664,
			672,672,680,680,688,688,696,696,
			704,704,712,712,720,720,728,728,
			736,736,744,744,752,752,760,760,
			768,768,776,776,784,784,792,792,
			800,800,808,808,816,816,824,824,
			832,832,840,840,848,848,856,856,
			864,864,872,872,880,880,888,888,
			896,896,904,904,912,912,920,920,
			928,928,936,936,944,944,952,952,
			960,960,968,968,976,976,984,984,
			992,992,1000,1000,1008,1008,1016,1016,
		},
	},
	{		{
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,
		},
		{
			0,8,16,24,32,40,48,56,
			64,72,80,88,96,104,112,120,
			128,136,144,152,160,168,176,184,
			192,200,208,216,224,232,240,248,
			256,264,272,280,288,296,304,312,
			320,328,336,344,352,360,368,376,
			384,392,400,408,416,424,432,440,
			448,456,464,472,480,488,496,504,
			512,520,528,536,544,552,560,568,
			576,584,592,600,608,616,624,632,
			640,648,656,664,672,680,688,696,
			704,712,720,728,736,744,752,760,
			768,776,784,792,800,808,816,824,
			832,840,848,856,864,872,880,888,
			896,904,912,920,928,936,944,952,
			960,968,976,984,992,1000,1008,1016,
			1024,1032,1040,1048,1056,1064,1072,1080,
			1088,1096,1104,1112,1120,1128,1136,1144,
			1152,1160,1168,1176,1184,1192,1200,1208,
			1216,1224,1232,1240,1248,1256,1264,1272,
			1280,1288,1296,1304,1312,1320,1328,1336,
			1344,1352,1360,1368,1376,1384,1392,1400,
			1408,1416,1424,1432,1440,1448,1456,1464,
			1472,1480,1488,1496,1504,1512,1520,1528,
			1536,1544,1552,1560,1568,1576,1584,1592,
			1600,1608,1616,1624,1632,1640,1648,1656,
			1664,1672,1680,1688,1696,1704,1712,1720,
			1728,1736,1744,1752,1760,1768,1776,1784,
			1792,1800,1808,1816,1824,1832,1840,1848,
			1856,1864,1872,1880,1888,1896,1904,1912,
			1920,1928,1936,1944,1952,1960,1968,1976,
			1984,1992,2000,2008,2016,2024,2032,2040,
		},
		{
			0,16,32,48,64,80,96,112,
			128,144,160,176,192,208,224,240,
			256,272,288,304,320,336,352,368,
			384,400,416,432,448,464,480,496,
			512,528,544,560,576,592,608,624,
			640,656,672,688,704,720,736,752,
			768,784,800,816,832,848,864,880,
			896,912,928,944,960,976,992,1008,
			1024,1040,1056,1072,1088,1104,1120,1136,
			1152,1168,1184,1200,1216,1232,1248,1264,
			1280,1296,1312,1328,1344,1360,1376,1392,
			1408,1424,1440,1456,1472,1488,1504,1520,
			1536,1552,1568,1584,1600,1616,1632,1648,
			1664,1680,1696,1712,1728,1744,1760,1776,
			1792,1808,1824,1840,1856,1872,1888,1904,
			1920,1936,1952,1968,1984,2000,2016,2032,
			2048,2064,2080,2096,2112,2128,2144,2160,
			2176,2192,2208,2224,2240,2256,2272,2288,
			2304,2320,2336,2352,2368,2384,2400,2416,
			2432,2448,2464,2480,2496,2512,2528,2544,
			2560,2576,2592,2608,2624,2640,2656,2672,
			2688,2704,2720,2736,2752,2768,2784,2800,
			2816,2832,2848,2864,2880,2896,2912,2928,
			2944,2960,2976,2992,3008,3024,3040,3056,
			3072,3088,3104,3120,3136,3152,3168,3184,
			3200,3216,3232,3248,3264,3280,3296,3312,
			3328,3344,3360,3376,3392,3408,3424,3440,
			3456,3472,3488,3504,3520,3536,3552,3568,
			3584,3600,3616,3632,3648,3664,3680,3696,
			3712,3728,3744,3760,3776,3792,3808,3824,
			3840,3856,3872,3888,3904,3920,3936,3952,
			3968,3984,4000,4016,4032,4048,4064,4080,
		},
		{
			0,32,64,96,128,160,192,224,
			256,288,320,352,384,416,448,480,
			512,544,576,608,640,672,704,736,
			768,800,832,864,896,928,960,992,
			1024,1056,1088,1120,1152,1184,1216,1248,
			1280,1312,1344,1376,1408,1440,1472,1504,
			1536,1568,1600,1632,1664,1696,1728,1760,
			1792,1824,1856,1888,1920,1952,1984,2016,
			2048,2080,2112,2144,2176,2208,2240,2272,
			2304,2336,2368,2400,2432,2464,2496,2528,
			2560,2592,2624,2656,2688,2720,2752,2784,
			2816,2848,2880,2912,2944,2976,3008,3040,
			3072,3104,3136,3168,3200,3232,3264,3296,
			3328,3360,3392,3424,3456,3488,3520,3552,
			3584,3616,3648,3680,3712,3744,3776,3808,
			3840,3872,3904,3936,3968,4000,4032,4064,
			4096,4128,4160,4192,4224,4256,4288,4320,
			4352,4384,4416,4448,4480,4512,4544,4576,
			4608,4640,4672,4704,4736,4768,4800,4832,
			4864,4896,4928,4960,4992,5024,5056,5088,
			5120,5152,5184,5216,5248,5280,5312,5344,
			5376,5408,5440,5472,5504,5536,5568,5600,
			5632,5664,5696,5728,5760,5792,5824,5856,
			5888,5920,5952,5984,6016,6048,6080,6112,
			6144,6176,6208,6240,6272,6304,6336,6368,
			6400,6432,6464,6496,6528,6560,6592,6624,
			6656,6688,6720,6752,6784,6816,6848,6880,
			6912,6944,6976,7008,7040,7072,7104,7136,
			7168,7200,7232,7264,7296,7328,7360,7392,
			7424,7456,7488,7520,7552,7584,7616,7648,
			7680,7712,7744,7776,7808,7840,7872,7904,
			7936,7968,8000,8032,8064,8096,8128,8160,
		},
	},
};

// ---------------------------------------------------------------------------
//	テーブル作成
//
void MakeLFOTable()
{
	if (tablemade)
		return;

	tablemade = true;

#if 0
	int i;

	static const double pms[2][8] = 
	{ 
		{ 0, 1/360., 2/360., 3/360.,  4/360.,  6/360., 12/360.,  24/360., },	// OPNA
		{ 0, 1/480., 2/480., 4/480., 10/480., 20/480., 80/480., 140/480., },	// OPM
	};
	//		 3		 6,      12      30       60       240      420		/ 720
	//	1.000963
	//	lfofref[level * max * wave];
	//	pre = lfofref[level][pms * wave >> 8];
	static const uint8 amt[2][4] = 
	{
		{ 31, 6, 4, 3 }, // OPNA
		{ 31, 2, 1, 0 }, //	OPM
	};

	//	FM_LFOENTS	= 256

	for (int type = 0; type < 2; type++)
	{
		for (i=0; i<8; i++)
		{
			double pmb = pms[type][i];
			for (int j=0; j<FM_LFOENTS; j++)
			{
				double w = 0.6 * pmb * sin(2 * j * 3.14159265358979323846 / FM_LFOENTS) + 1;
				pmtable[type][i][j] = int(0x10000 * (w - 1));
			}
		}
		for (i=0; i<4; i++)
		{
			for (int j=0; j<FM_LFOENTS; j++)
			{
				amtable[type][i][j] = (((j * 4) >> amt[type][i]) * 2) << 2;
			}
		}
	}
#endif
#if 1
	for (int type = 0; type < 2; type++)
	{
		for (int i=0; i<8; i++)
		{
			for (int j=0; j<FM_LFOENTS; j++)
			{
				int v = pmtable_s[type][i][j];
			//	ASSERT(pmtable[type][i][j] == v);
				pmtable[type][i][j] = v;
			}
		}
		for (int i=0; i<4; i++)
		{
			for (int j=0; j<FM_LFOENTS; j++)
			{
				uint v = amtable_s[type][i][j];
			//	ASSERT(amtable[type][i][j] == v);
				amtable[type][i][j] = v;
			}
		}
	}
#else
	static char sbuf[1*1024*1024];
	char *sp = &sbuf[0];

	sp += sprintf(sp, "static const int pmtable_s[2][8][FM_LFOENTS] = {\n");
	for (int type = 0; type < 2; type++)
	{
		sp += sprintf(sp, "\t{\n");
		for (i=0; i<8; i++)
		{
			sp += sprintf(sp, "\t\t{\n");
			double pmb = pms[type][i];
			for (int j=0; j<FM_LFOENTS; j++)
			{
				if((j & 7) == 0) {
					sp += sprintf(sp, "\t\t\t");
				}
				int t = pmtable[type][i][j];
				sp += sprintf(sp, "%d,", t);
				if((j & 7) == 7) {
					sp += sprintf(sp, "\n");
				}
			}
			sp += sprintf(sp, "\t\t},\n");
		}
		sp += sprintf(sp, "\t},\n");
	}
	sp += sprintf(sp, "};\n");

	sp += sprintf(sp, "static const uint amtable_s[2][4][FM_LFOENTS] = {\n");
	for (int type = 0; type < 2; type++)
	{
		sp += sprintf(sp, "\t{\n");
		for (i=0; i<4; i++)
		{
			sp += sprintf(sp, "\t\t{\n");
			double pmb = pms[type][i];
			for (int j=0; j<FM_LFOENTS; j++)
			{
				if((j & 7) == 0) {
					sp += sprintf(sp, "\t\t\t");
				}
				int t = amtable[type][i][j];
				sp += sprintf(sp, "%d,", t);
				if((j & 7) == 7) {
					sp += sprintf(sp, "\n");
				}
			}
			sp += sprintf(sp, "\t\t},\n");
		}
		sp += sprintf(sp, "\t},\n");
	}
	sp += sprintf(sp, "};\n");

	OutputDebugString(&sbuf[0]);
#endif
}


// ---------------------------------------------------------------------------
//	チップ内で共通な部分
//
Chip::Chip()
: ratio_(0), aml_(0), pml_(0), pmv_(0), optype_(typeN)
{
}

//	クロック・サンプリングレート比に依存するテーブルを作成
void Chip::SetRatio(uint ratio)
{
	if (ratio_ != ratio)
	{
		ratio_ = ratio;
		MakeTable();
	}
}

void Chip::MakeTable()
{
	int h, l;
	
	// PG Part
	static const float dt2lv[4] = { 1.f, 1.414f, 1.581f, 1.732f };
	for (h=0; h<4; h++)
	{
		assert(2 + FM_RATIOBITS - FM_PGBITS >= 0);
		double rr = dt2lv[h] * double(ratio_) / (1 << (2 + FM_RATIOBITS - FM_PGBITS));
		for (l=0; l<16; l++)
		{
			int mul = l ? l * 2 : 1;
			multable_[h][l] = uint(mul * rr);
		}
	}
}

// ---------------------------------------------------------------------------
//	Operator
//
bool FM::Operator::tablehasmade = false;
uint FM::Operator::sinetable[1024];
int32 FM::Operator::cltable[FM_CLENTS];

//	構築
FM::Operator::Operator()
: chip_(0)
{
	if (!tablehasmade)
		MakeTable();

	// EG Part
	ar_ = dr_ = sr_ = rr_ = key_scale_rate_ = 0;
	ams_ = amtable[0][0];
	mute_ = false;
	keyon_ = false;
	tl_out_ = false;
	ssg_type_ = 0;

	// PG Part
	multiple_ = 0;
	detune_ = 0;
	detune2_ = 0;

	// LFO
	ms_ = 0;
}

//	初期化
void FM::Operator::Reset()
{
	// EG part
	tl_ = tl_latch_ = 127;
	ShiftPhase(off);
	eg_count_ = 0;
	eg_curve_count_ = 0;
	ssg_phase_ = 0;

	// PG part
	pg_count_ = 0;

	// OP part
	out_ = out2_ = 0;

	param_changed_ = true;
	PARAMCHANGE(0);
}

void Operator::MakeTable()
{
	// 対数テーブルの作成
	assert(FM_CLENTS >= 256);

#if 0
	int* p = cltable;
	int i;
	for (i=0; i<256; i++)
	{
		int v = int(floor(pow(2., 13. - i / 256.)));
		v = (v + 2) & ~3;
		*p++ = v;
		*p++ = -v;
	}

	while (p < cltable + FM_CLENTS)
	{
		*p++ = p[-512] / 2;
	}

	// サインテーブルの作成
	double log2 = log(2.);
	for (i=0; i<FM_OPSINENTS/2; i++)
	{
		double r = (i * 2 + 1) * FM_PI / FM_OPSINENTS;
		double q = -256 * log(sin(r)) / log2;
		uint s = (int) (floor(q + 0.5)) + 1;
		sinetable[i]                  = s * 2 ;
		sinetable[FM_OPSINENTS / 2 + i] = s * 2 + 1;
	}
#endif
#if 1
	for(int i = 0; i < FM_CLENTS; ++i) {
		int v = cltable_s[i];
//		ASSERT(cltable[i] == v);
		cltable[i] = v;
	}
	for(int i = 0; i < FM_OPSINENTS; ++i) {
		uint v = sinetable_s[i];
//		ASSERT(sinetable[i] == v);
		sinetable[i] = v;
	}
#else
	static char sbuf[1*1024*1024];
	char *sp = &sbuf[0];

	sp += sprintf(sp, "static const int cltable_s[FM_CLENTS] = {\n");
	for(int i = 0; i < FM_CLENTS; ++i) {
		if((i & 7) == 0) {
			sp += sprintf(sp, "\t\t");
		}
		sp += sprintf(sp, "%d,", cltable[i]);
		if((i & 7) == 7) {
			sp += sprintf(sp, "\n");
		}
	}
	sp += sprintf(sp, "};\n");

	sp += sprintf(sp, "static const int sinetable_s[FM_OPSINENTS] = {\n");
	for(int i = 0; i < FM_OPSINENTS; ++i) {
		if((i & 7) == 0) {
			sp += sprintf(sp, "\t\t");
		}
		sp += sprintf(sp, "%d,", sinetable[i]);
		if((i & 7) == 7) {
			sp += sprintf(sp, "\n");
		}
	}
	sp += sprintf(sp, "};\n");
	OutputDebugString(&sbuf[0]);
#endif
	MakeLFOTable();

	tablehasmade = true;
}



inline void FM::Operator::SetDPBN(uint dp, uint bn)
{
	dp_ = dp, bn_ = bn; param_changed_ = true; 
	PARAMCHANGE(1);
}


//	準備
void Operator::Prepare()
{
	if (param_changed_)
	{
		param_changed_ = false;
		//	PG Part
		pg_diff_ = (dp_ + dttable[detune_ + bn_]) * chip_->GetMulValue(detune2_, multiple_);
		pg_diff_lfo_ = pg_diff_ >> 11;

		// EG Part
		key_scale_rate_ = bn_ >> (3-ks_);
		tl_out_ = mute_ ? 0x3ff : tl_ * 8;
		
		switch (eg_phase_)
		{
		case attack:
			SetEGRate(ar_ ? Min(63, ar_ + key_scale_rate_) : 0);
			break;
		case decay:
			SetEGRate(dr_ ? Min(63, dr_ + key_scale_rate_) : 0);
			eg_level_on_next_phase_ = sl_ * 8;
			break;
		case sustain:
			SetEGRate(sr_ ? Min(63, sr_ + key_scale_rate_) : 0);
			break;
		case release:
			SetEGRate(Min(63, rr_ + key_scale_rate_));
			break;
		}

		// SSG-EG
		if (ssg_type_ && (eg_phase_ != release))
		{
//			int m = ar_ >= ((ssg_type_ == 8 || ssg_type_ == 12) ? 56 : 60);		//-XM6_pid//
			int m = ar_ >= ((ssg_type_ == 8 || ssg_type_ == 12) ? 56U : 60U);	//+XM6_pid//

			assert(0 <= ssg_phase_ && ssg_phase_ <= 2);
			const int* table = ssgenvtable[ssg_type_ & 7][m][ssg_phase_];

			ssg_offset_ = table[0] * 0x200;
			ssg_vector_ = table[1];
		}
		// LFO
		ams_ = amtable[type_][amon_ ? (ms_ >> 4) & 3 : 0];
		EGUpdate();

		dbgopout_ = 0;
	}
}
//	envelop の eg_phase_ 変更
void Operator::ShiftPhase(EGPhase nextphase)
{
	switch (nextphase)
	{
	case attack:		// Attack Phase
		tl_ = tl_latch_;
		if (ssg_type_)
		{
			ssg_phase_ = ssg_phase_ + 1;
			if (ssg_phase_ > 2)
				ssg_phase_ = 1;
			
//			int m = ar_ >= ((ssg_type_ == 8 || ssg_type_ == 12) ? 56 : 60);		//-XM6_pid//
			int m = ar_ >= ((ssg_type_ == 8 || ssg_type_ == 12) ? 56U : 60U);	//+XM6_pid//

			assert(0 <= ssg_phase_ && ssg_phase_ <= 2);
			const int* table = ssgenvtable[ssg_type_ & 7][m][ssg_phase_];

			ssg_offset_ = table[0] * 0x200;
			ssg_vector_ = table[1];
		}
		if ((ar_ + key_scale_rate_) < 62)
		{
			SetEGRate(ar_ ? Min(63, ar_ + key_scale_rate_) : 0);
			eg_phase_ = attack;
			break;
		}
	case decay:			// Decay Phase
		if (sl_)
		{
			eg_level_ = 0;
			eg_level_on_next_phase_ = ssg_type_ ? Min(sl_ * 8, 0x200) : sl_ * 8;

			SetEGRate(dr_ ? Min(63, dr_ + key_scale_rate_) : 0);
			eg_phase_ = decay;
			break;
		}
	case sustain:		// Sustain Phase
		eg_level_ = sl_ * 8;
		eg_level_on_next_phase_ = ssg_type_ ? 0x200 : 0x400;

		SetEGRate(sr_ ? Min(63, sr_ + key_scale_rate_) : 0);
		eg_phase_ = sustain;
		break;
	
	case release:		// Release Phase
		if (ssg_type_)
		{
			eg_level_ = eg_level_ * ssg_vector_ + ssg_offset_;
			ssg_vector_ = 1;
			ssg_offset_ = 0;
		}
		if (eg_phase_ == attack || (eg_level_ < FM_EG_BOTTOM)) //0x400/* && eg_phase_ != off*/))
		{
			eg_level_on_next_phase_ = 0x400;
			SetEGRate(Min(63, rr_ + key_scale_rate_));
			eg_phase_ = release;
			break;
		}
	case off:			// off
	default:
		eg_level_ = FM_EG_BOTTOM;
		eg_level_on_next_phase_ = FM_EG_BOTTOM;
		EGUpdate();
		SetEGRate(0);
		eg_phase_ = off;
		break;
	}
}

//	Block/F-Num
void Operator::SetFNum(uint f)
{
	dp_ = (f & 2047) << ((f >> 11) & 7);
	bn_ = notetable[(f >> 7) & 127];
	param_changed_ = true;
	PARAMCHANGE(2);
}

//	１サンプル合成

//	ISample を envelop count (2π) に変換するシフト量
#define IS2EC_SHIFT		((20 + FM_PGBITS) - 13)


// 入力: s = 20+FM_PGBITS = 29
#define Sine(s)	sinetable[((s) >> (20+FM_PGBITS-FM_OPSINBITS))&(FM_OPSINENTS-1)]
#define SINE(s) sinetable[(s) & (FM_OPSINENTS-1)]

inline FM::ISample Operator::LogToLin(uint a)
{
#if 1 // FM_CLENTS < 0xc00		// 400 for TL, 400 for ENV, 400 for LFO.
	return (a < FM_CLENTS) ? cltable[a] : 0;
#else
	return cltable[a];
#endif
}

inline void Operator::EGUpdate()
{
	if (!ssg_type_)
	{
		eg_out_ = Min(tl_out_ + eg_level_, 0x3ff) << (1 + 2);
	}
	else
	{
		eg_out_ = Min(tl_out_ + eg_level_ * ssg_vector_ + ssg_offset_, 0x3ff) << (1 + 2);
	}
}

inline void Operator::SetEGRate(uint rate)
{
	eg_rate_ = rate;
	eg_count_diff_ = decaytable2[rate / 4] * chip_->GetRatio();
}

//	EG 計算
void FM::Operator::EGCalc()
{
	eg_count_ = (2047 * 3) << FM_RATIOBITS;				// ##この手抜きは再現性を低下させる
	
	if (eg_phase_ == attack)
	{
		int c = attacktable[eg_rate_][eg_curve_count_ & 7];
		if (c >= 0)
		{
			eg_level_ -= 1 + (eg_level_ >> c);
			if (eg_level_ <= 0)
				ShiftPhase(decay);
		}
		EGUpdate();
	}
	else
	{
		if (!ssg_type_)
		{
			eg_level_ += decaytable1[eg_rate_][eg_curve_count_ & 7];
			if (eg_level_ >= eg_level_on_next_phase_)
				ShiftPhase(EGPhase(eg_phase_+1));
			EGUpdate();
		}
		else
		{
			eg_level_ += 4 * decaytable1[eg_rate_][eg_curve_count_ & 7];
			if (eg_level_ >= eg_level_on_next_phase_)
			{
				EGUpdate();
				switch (eg_phase_)
				{
				case decay:
					ShiftPhase(sustain);
					break;
				case sustain:
					ShiftPhase(attack);
					break;
				case release:
					ShiftPhase(off);
					break;
				}
			}
		}
	}
	eg_curve_count_++;
}

inline void FM::Operator::EGStep()
{
	eg_count_ -= eg_count_diff_;

	// EG の変化は全スロットで同期しているという噂もある
	if (eg_count_ <= 0)
		EGCalc();
}

//	PG 計算
//	ret:2^(20+PGBITS) / cycle
inline uint32 FM::Operator::PGCalc()
{
	uint32 ret = pg_count_;
	pg_count_ += pg_diff_;
	dbgpgout_ = ret;
	return ret;
}

inline uint32 FM::Operator::PGCalcL()
{
	uint32 ret = pg_count_;
	pg_count_ += pg_diff_ + ((pg_diff_lfo_ * chip_->GetPMV()) >> 5);// & -(1 << (2+IS2EC_SHIFT)));
	dbgpgout_ = ret;
	return ret /* + pmv * pg_diff_;*/;
}

//	OP 計算
//	in: ISample (最大 8π)
inline FM::ISample FM::Operator::Calc(ISample in)
{
	EGStep();
	out2_ = out_;

	int pgin = PGCalc() >> (20+FM_PGBITS-FM_OPSINBITS);
	pgin += in >> (20+FM_PGBITS-FM_OPSINBITS-(2+IS2EC_SHIFT));
	out_ = LogToLin(eg_out_ + SINE(pgin));

	dbgopout_ = out_;
	return out_;
}

inline FM::ISample FM::Operator::CalcL(ISample in)
{
	EGStep();

	int pgin = PGCalcL() >> (20+FM_PGBITS-FM_OPSINBITS);
	pgin += in >> (20+FM_PGBITS-FM_OPSINBITS-(2+IS2EC_SHIFT));
	out_ = LogToLin(eg_out_ + SINE(pgin) + ams_[chip_->GetAML()]);

	dbgopout_ = out_;
	return out_;
}

inline FM::ISample FM::Operator::CalcN(uint noise)
{
	EGStep();
	
	int lv = Max(0, 0x3ff - (tl_out_ + eg_level_)) << 1;
	
	// noise & 1 ? lv : -lv と等価 
	noise = (noise & 1) - 1;
	out_ = (lv + noise) ^ noise;

	dbgopout_ = out_;
	return out_;
}

//	OP (FB) 計算
//	Self Feedback の変調最大 = 4π
inline FM::ISample FM::Operator::CalcFB(uint fb)
{
	EGStep();

	ISample in = out_ + out2_;
	out2_ = out_;

	int pgin = PGCalc() >> (20+FM_PGBITS-FM_OPSINBITS);
	if (fb < 31)
	{
		pgin += ((in << (1 + IS2EC_SHIFT)) >> fb) >> (20+FM_PGBITS-FM_OPSINBITS);
	}
	out_ = LogToLin(eg_out_ + SINE(pgin));
	dbgopout_ = out2_;

	return out2_;
}

inline FM::ISample FM::Operator::CalcFBL(uint fb)
{
	EGStep();
	
	ISample in = out_ + out2_;
	out2_ = out_;

	int pgin = PGCalcL() >> (20+FM_PGBITS-FM_OPSINBITS);
	if (fb < 31)
	{
		pgin += ((in << (1 + IS2EC_SHIFT)) >> fb) >> (20+FM_PGBITS-FM_OPSINBITS);
	}

	out_ = LogToLin(eg_out_ + SINE(pgin) + ams_[chip_->GetAML()]);
	dbgopout_ = out_;

	return out_;
}

#undef Sine

// ---------------------------------------------------------------------------
//	4-op Channel
//
const uint8 Channel4::fbtable[8] = { 31, 7, 6, 5, 4, 3, 2, 1 };
int Channel4::kftable[64];

bool Channel4::tablehasmade = false;


Channel4::Channel4()
{
	if (!tablehasmade)
		MakeTable();

	SetAlgorithm(0);
	pms = pmtable[0][0];
}

void Channel4::MakeTable()
{
#if 0
	// 100/64 cent =  2^(i*100/64*1200)
	for (int i=0; i<64; i++)
	{
		kftable[i] = int(0x10000 * pow(2., i / 768.) );
	}
#endif
#if 1
	for (int i=0; i<64; i++)
	{
		int v = kftable_s[i];
//		ASSERT(kftable[i] == v);
		kftable[i] = v;
	}
#endif
#if 0
	static char sbuf[1*1024*1024];
	char *sp = &sbuf[0];

	sp += sprintf(sp, "static const int kftable_s[64] = {\n");
	for(int i = 0; i < 64; ++i) {
		if((i & 7) == 0) {
			sp += sprintf(sp, "\t\t");
		}
		sp += sprintf(sp, "%d,", kftable[i]);
		if((i & 7) == 7) {
			sp += sprintf(sp, "\n");
		}
	}
	sp += sprintf(sp, "};\n");
	OutputDebugString(&sbuf[0]);
#endif
}

// リセット
void Channel4::Reset()
{
	op[0].Reset();
	op[1].Reset();
	op[2].Reset();
	op[3].Reset();
}

//	Calc の用意
int Channel4::Prepare()
{
	op[0].Prepare();
	op[1].Prepare();
	op[2].Prepare();
	op[3].Prepare();
	
	pms = pmtable[op[0].type_][op[0].ms_ & 7];
	int key = (op[0].IsOn() | op[1].IsOn() | op[2].IsOn() | op[3].IsOn()) ? 1 : 0;
	int lfo = op[0].ms_ & (op[0].amon_ | op[1].amon_ | op[2].amon_ | op[3].amon_ ? 0x37 : 7) ? 2 : 0;
	return key | lfo;
}

//	F-Number/BLOCK を設定
void Channel4::SetFNum(uint f)
{
	for (int i=0; i<4; i++)
		op[i].SetFNum(f);
}

//	KC/KF を設定
void Channel4::SetKCKF(uint kc, uint kf)
{
	const static uint kctable[16] = 
	{ 
		5197, 5506, 5833, 6180, 6180, 6547, 6937, 7349, 
		7349, 7786, 8249, 8740, 8740, 9259, 9810, 10394, 
	};

	int oct = 19 - ((kc >> 4) & 7);

//printf("%p", this);
	uint kcv = kctable[kc & 0x0f];
	kcv = (kcv + 2) / 4 * 4;
//printf(" %.4x", kcv);
	uint dp = kcv * kftable[kf & 0x3f];
//printf(" %.4x %.4x %.8x", kcv, kftable[kf & 0x3f], dp >> oct);
	dp >>= 16 + 3;
	dp <<= 16 + 3;
	dp >>= oct;	
	uint bn = (kc >> 2) & 31;
	op[0].SetDPBN(dp, bn);
	op[1].SetDPBN(dp, bn);
	op[2].SetDPBN(dp, bn);
	op[3].SetDPBN(dp, bn);
//printf(" %.8x\n", dp);
}

//	キー制御
void Channel4::KeyControl(uint key)
{
	if (key & 0x1) op[0].KeyOn(); else op[0].KeyOff();
	if (key & 0x2) op[1].KeyOn(); else op[1].KeyOff();
	if (key & 0x4) op[2].KeyOn(); else op[2].KeyOff();
	if (key & 0x8) op[3].KeyOn(); else op[3].KeyOff();
}

//	アルゴリズムを設定
void Channel4::SetAlgorithm(uint algo)
{
	static const uint8 table1[8][6] = 
	{
		{ 0, 1, 1, 2, 2, 3 },	{ 1, 0, 0, 1, 1, 2 },
		{ 1, 1, 1, 0, 0, 2 },	{ 0, 1, 2, 1, 1, 2 },
		{ 0, 1, 2, 2, 2, 1 },	{ 0, 1, 0, 1, 0, 1 },
		{ 0, 1, 2, 1, 2, 1 },	{ 1, 0, 1, 0, 1, 0 },
	};

	in [0] = &buf[table1[algo][0]];
	out[0] = &buf[table1[algo][1]];
	in [1] = &buf[table1[algo][2]];
	out[1] = &buf[table1[algo][3]];
	in [2] = &buf[table1[algo][4]];
	out[2] = &buf[table1[algo][5]];

	op[0].ResetFB();
	algo_ = algo;
}

//  合成
ISample Channel4::Calc()
{
	int r;
	switch (algo_)
	{
	case 0:
		op[2].Calc(op[1].Out());
		op[1].Calc(op[0].Out());
		r = op[3].Calc(op[2].Out());
		op[0].CalcFB(fb);
		break;
	case 1:
		op[2].Calc(op[0].Out() + op[1].Out());
		op[1].Calc(0);
		r = op[3].Calc(op[2].Out());
		op[0].CalcFB(fb);
		break;
	case 2:
		op[2].Calc(op[1].Out());
		op[1].Calc(0);
		r = op[3].Calc(op[0].Out() + op[2].Out());
		op[0].CalcFB(fb);
		break;
	case 3:
		op[2].Calc(0);
		op[1].Calc(op[0].Out());
		r = op[3].Calc(op[1].Out() + op[2].Out());
		op[0].CalcFB(fb);
		break;
	case 4:
		op[2].Calc(0);
		r = op[1].Calc(op[0].Out());
		r += op[3].Calc(op[2].Out());
		op[0].CalcFB(fb);
		break;
	case 5:
		r =  op[2].Calc(op[0].Out());
		r += op[1].Calc(op[0].Out());
		r += op[3].Calc(op[0].Out());
		op[0].CalcFB(fb);
		break;
	case 6:
		r  = op[2].Calc(0);
		r += op[1].Calc(op[0].Out());
		r += op[3].Calc(0);
		op[0].CalcFB(fb);
		break;
	case 7:
		r  = op[2].Calc(0);
		r += op[1].Calc(0);
		r += op[3].Calc(0);
		r += op[0].CalcFB(fb);
		break;
	default:		//+XM6_pid//
		r = 0;		//+XM6_pid//
		break;		//+XM6_pid//
	}
	return r;
}

//  合成
ISample Channel4::CalcL()
{
	chip_->SetPMV(pms[chip_->GetPML()]);

	int r;
	switch (algo_)
	{
	case 0:
		op[2].CalcL(op[1].Out());
		op[1].CalcL(op[0].Out());
		r = op[3].CalcL(op[2].Out());
		op[0].CalcFBL(fb);
		break;
	case 1:
		op[2].CalcL(op[0].Out() + op[1].Out());
		op[1].CalcL(0);
		r = op[3].CalcL(op[2].Out());
		op[0].CalcFBL(fb);
		break;
	case 2:
		op[2].CalcL(op[1].Out());
		op[1].CalcL(0);
		r = op[3].CalcL(op[0].Out() + op[2].Out());
		op[0].CalcFBL(fb);
		break;
	case 3:
		op[2].CalcL(0);
		op[1].CalcL(op[0].Out());
		r = op[3].CalcL(op[1].Out() + op[2].Out());
		op[0].CalcFBL(fb);
		break;
	case 4:
		op[2].CalcL(0);
		r = op[1].CalcL(op[0].Out());
		r += op[3].CalcL(op[2].Out());
		op[0].CalcFBL(fb);
		break;
	case 5:
		r =  op[2].CalcL(op[0].Out());
		r += op[1].CalcL(op[0].Out());
		r += op[3].CalcL(op[0].Out());
		op[0].CalcFBL(fb);
		break;
	case 6:
		r  = op[2].CalcL(0);
		r += op[1].CalcL(op[0].Out());
		r += op[3].CalcL(0);
		op[0].CalcFBL(fb);
		break;
	case 7:
		r  = op[2].CalcL(0);
		r += op[1].CalcL(0);
		r += op[3].CalcL(0);
		r += op[0].CalcFBL(fb);
		break;
	default:		//+XM6_pid//
		r = 0;		//+XM6_pid//
		break;		//+XM6_pid//
	}
	return r;
}

//  合成
ISample Channel4::CalcN(uint noise)
{
	buf[1] = buf[2] = buf[3] = 0;

	buf[0] = op[0].out_; op[0].CalcFB(fb);
	*out[0] += op[1].Calc(*in[0]);
	*out[1] += op[2].Calc(*in[1]);
	int o = op[3].out_;
	op[3].CalcN(noise);
	return *out[2] + o;
}

//  合成
ISample Channel4::CalcLN(uint noise)
{
	chip_->SetPMV(pms[chip_->GetPML()]);
	buf[1] = buf[2] = buf[3] = 0;

	buf[0] = op[0].out_; op[0].CalcFBL(fb); 
	*out[0] += op[1].CalcL(*in[0]);
	*out[1] += op[2].CalcL(*in[1]);
	int o = op[3].out_;
	op[3].CalcN(noise);
	return *out[2] + o;
}

}	// namespace FM
